{
	"info": {
		"name": "marina-api",
		"_postman_id": "213bf9b8-8fcb-e0b4-c2db-b04a2dc52064",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Pre-Clean",
			"description": "",
			"item": [
				{
					"name": "CLEAN UP - Boats 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Clear Boats",
									"pm.environment.set(\"numBoats\", \"\");",
									"pm.environment.set(\"boatUrl\", \"\");",
									"",
									"// Clean up ",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has json body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"var numBoats = Object.keys(pm.response.json()).length;",
									"if (numBoats === 0) {",
									"    postman.setNextRequest(\"CLEAN UP - Slips 1\");",
									"    pm.environment.set(\"boatUrl\", \"\");",
									"    console.log(\"All Boats Deleted\");",
									"}",
									"else {",
									"    var boatUrl = pm.response.json()[0].url;",
									"    pm.environment.set(\"boatUrl\", boatUrl);",
									"    pm.expect(boatUrl).to.equal(pm.environment.get(\"boatUrl\"));",
									"    console.log(\"More Boats: \" + numBoats);",
									"}"
								],
								"id": "d27d4192-bfc1-40f5-b610-f6571f0532e8",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "CLEAN UP - Boats 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Delete boat and Repeat",
									"pm.test(\"response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"    postman.setNextRequest(\"CLEAN UP - Boats 1\");",
									"});"
								],
								"id": "c06c2227-49e5-428b-b687-2d5b8fc008e7",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{boatUrl}}",
							"host": [
								"{{boatUrl}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "CLEAN UP - Slips 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Clear Slips",
									"pm.environment.set(\"numSlips\", \"\");",
									"pm.environment.set(\"slipUrl\", \"\");",
									"",
									"// Clean up ",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has json body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"Conditional\", function() {",
									"    data = pm.response.json();",
									"    var numSlips = Object.keys(pm.response.json()).length;",
									"    if (numSlips === 0) {",
									"        postman.setNextRequest(\"TEST 1: GET /boats/\");",
									"        pm.environment.set(\"slipUrl\", \"\");",
									"        console.log(\"All Slips Deleted\");",
									"    }",
									"    else {",
									"        var slipUrl = pm.response.json()[0].url;",
									"        pm.environment.set(\"slipUrl\", slipUrl);",
									"        pm.expect(slipUrl).to.equal(pm.environment.get(\"slipUrl\"));",
									"        console.log(\"More Slips: \" + numSlips);",
									"    }",
									"})",
									""
								],
								"id": "ee02c804-3691-455e-a41b-28fc26e17cc9",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "CLEAN UP - Slips 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Delete boat and Repeat",
									"pm.test(\"response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"    postman.setNextRequest(\"CLEAN UP - Slips 1\");",
									"});"
								],
								"id": "1fe101f7-3460-49e9-ae00-7bc0cbb52fae",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{slipUrl}}",
							"host": [
								"{{slipUrl}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Create & Read Boat",
			"description": "",
			"item": [
				{
					"name": "TEST 1: GET /boats/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// False until proven true",
									"pm.environment.set(\"test1\", false)",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response has 0 objects\", function () {",
									"    var length = Object.keys(pm.response.json()).length;",
									"    pm.expect(length).to.equal(0);",
									"});",
									"",
									"// Passes all tests",
									"pm.environment.set(\"test1\", true)"
								],
								"id": "f90d39e1-e27a-42a0-84e1-11f19c12510b",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set environmental variables.",
									"",
									"pm.environment.set(\"test2name\", \"Boat Name\");",
									"pm.environment.set(\"test2type\", \"Boat Type\");",
									"pm.environment.set(\"test2length\", \"10\");",
									"",
									"",
									"pm.environment.set(\"test6name\", \"NEW Boat Name\");",
									"pm.environment.set(\"test6type\", \"NEW Boat Type\");",
									"pm.environment.set(\"test6length\", \"20\");"
								],
								"id": "c7b56151-7869-459e-8e5d-6cc054919443",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": "Get all boats"
					},
					"response": []
				},
				{
					"name": "TEST 2: POST /boats/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Initialize test2 response variables",
									"pm.environment.set(\"test2url\", \"\");",
									"pm.environment.set(\"test2id\", null);",
									"pm.environment.set(\"test2response\", null);",
									"",
									"pm.test(\"response is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches request\", function () {",
									"    exp_name = pm.environment.get(\"test2name\");",
									"    exp_type = pm.environment.get(\"test2type\");",
									"    exp_length = pm.environment.get(\"test2length\");",
									"    exp_at_sea = true;",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['name']).to.equal(exp_name);",
									"    pm.expect(res['type']).to.equal(exp_type);",
									"    pm.expect(res['length'].toString()).to.equal(exp_length);",
									"    pm.expect(res['at_sea']).to.equal(exp_at_sea);",
									"    ",
									"    // Save URL and ID",
									"    pm.environment.set(\"test2url\", res['url']);",
									"    pm.environment.set(\"test2id\", res['id']);",
									"    ",
									"    // Save response as string",
									"    res_string = JSON.stringify(res);",
									"    pm.environment.set(\"test2response\", res_string);",
									"    ",
									"    pm.environment.set(\"test1\", true)",
									"});",
									"",
									""
								],
								"id": "cdc1613c-b227-47f8-8536-6128837b3e6e",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "046e8e06-8c44-4f5a-954a-2a766b1193ef",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{test2name}}\",\n  \"type\": \"{{test2type}}\",\n  \"length\": {{test2length}}\n}"
						},
						"url": {
							"raw": "{{domain}}/boats",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats"
							]
						},
						"description": "Create Boat"
					},
					"response": []
				},
				{
					"name": "TEST 3: GET {{test2url}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches test2 data sent\", function () {",
									"    exp_name = pm.environment.get(\"test2name\");",
									"    exp_type = pm.environment.get(\"test2type\");",
									"    exp_length = pm.environment.get(\"test2length\");",
									"    exp_url = pm.environment.get(\"test2url\");",
									"    exp_id = pm.environment.get(\"test2id\");",
									"    exp_at_sea = true;",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['name']).to.equal(exp_name);",
									"    pm.expect(res['type']).to.equal(exp_type);",
									"    pm.expect(res['length'].toString()).to.equal(exp_length);",
									"    pm.expect(res['url']).to.equal(exp_url);",
									"    pm.expect(res['id'].toString()).to.equal(exp_id);",
									"    pm.expect(res['at_sea']).to.equal(exp_at_sea);",
									"",
									"    // Save At Sea Value",
									"    pm.environment.set(\"test2at_sea\", res['at_sea']);",
									"});"
								],
								"id": "e1cf0846-b6f8-4a3b-8145-b002655b3658",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "be88062d-bc4e-4271-9ec7-703a27004afa",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{test2url}}",
							"host": [
								"{{test2url}}"
							]
						},
						"description": "Test URL from test 2"
					},
					"response": []
				},
				{
					"name": "TEST 4: GET /boats/{{test2id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches test2 data sent\", function () {",
									"    exp_name = pm.environment.get(\"test2name\");",
									"    exp_type = pm.environment.get(\"test2type\");",
									"    exp_length = pm.environment.get(\"test2length\");",
									"    exp_url = pm.environment.get(\"test2url\");",
									"    exp_id = pm.environment.get(\"test2id\");",
									"    exp_at_sea = true;",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['name']).to.equal(exp_name);",
									"    pm.expect(res['type']).to.equal(exp_type);",
									"    pm.expect(res['length'].toString()).to.equal(exp_length);",
									"    pm.expect(res['url']).to.equal(exp_url);",
									"    pm.expect(res['id'].toString()).to.equal(exp_id);",
									"    pm.expect(res['at_sea']).to.equal(exp_at_sea);",
									"",
									"});"
								],
								"id": "05b70c2e-70bb-4cec-b7f1-10c2a7c533b8",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "f6f611e5-875f-4b6e-838c-d13be0214f3b",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/{{test2id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{test2id}}"
							]
						},
						"description": "Test id from test 2"
					},
					"response": []
				},
				{
					"name": "TEST 5: GET /boats/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test 1 was successful', function() {",
									"    var_test1 = pm.environment.get(\"test1\");",
									"    exp_test1 = 'true';",
									"    console.log(\"expected \" + var_test1 + \" to be \" + exp_test1 );",
									"    ",
									"    pm.expect(exp_test1.toString()).to.equal(var_test1.toString());",
									"});",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response has 1 element that matches test2 data\", function () {",
									"    exp_name = pm.environment.get(\"test2name\");",
									"    exp_type = pm.environment.get(\"test2type\");",
									"    exp_length = pm.environment.get(\"test2length\");",
									"    exp_url = pm.environment.get(\"test2url\");",
									"    exp_id = pm.environment.get(\"test2id\");",
									"    exp_at_sea = true;",
									"    ",
									"    // Test",
									"    res = pm.response.json();",
									"    boat = res[0];",
									"    pm.expect(boat['name']).to.equal(exp_name);",
									"    pm.expect(boat['type']).to.equal(exp_type);",
									"    pm.expect(boat['length'].toString()).to.equal(exp_length);",
									"    pm.expect(boat['url']).to.equal(exp_url);",
									"    pm.expect(boat['id'].toString()).to.equal(exp_id);",
									"    pm.expect(boat['at_sea']).to.equal(exp_at_sea);",
									"",
									"});"
								],
								"id": "5560de82-cdeb-499f-8855-d42370a335f5",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "9932c7db-9467-43be-a22b-2531d369ad8e",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": "Ensure new boat added to list of all boats"
					},
					"response": []
				}
			]
		},
		{
			"name": "Edit Boat",
			"description": "",
			"item": [
				{
					"name": "TEST 6: PATCH /boats/{test2id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Initialize test2 response variables",
									"pm.environment.set(\"test6url\", null);",
									"pm.environment.set(\"test6id\", null);",
									"pm.environment.set(\"test6response\", null);",
									"",
									"pm.test(\"response is 200 ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches request\", function () {",
									"    exp_name = pm.environment.get(\"test6name\");",
									"    exp_type = pm.environment.get(\"test6type\");",
									"    exp_length = pm.environment.get(\"test6length\");",
									"    exp_at_sea = true;",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['name']).to.equal(exp_name);",
									"    pm.expect(res['type']).to.equal(exp_type);",
									"    pm.expect(res['length'].toString()).to.equal(exp_length);",
									"    pm.expect(res['at_sea']).to.equal(exp_at_sea);",
									"    ",
									"    // // Save response as string",
									"    // res_string = JSON.stringify(res);",
									"    // pm.environment.set(\"test6response\", res_string);",
									"});"
								],
								"id": "84e0c872-1f33-456b-b2ba-cb4bbaeb6050",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "046e8e06-8c44-4f5a-954a-2a766b1193ef",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{test6name}}\",\n  \"type\": \"{{test6type}}\",\n  \"length\": {{test6length}}\n}"
						},
						"url": {
							"raw": "{{domain}}/boats/{{test2id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{test2id}}"
							]
						},
						"description": "Edit boat"
					},
					"response": []
				},
				{
					"name": "TEST 7: GET /boats/{{test2id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches test 6 data sent\", function () {",
									"    exp_name = pm.environment.get(\"test6name\");",
									"    exp_type = pm.environment.get(\"test6type\");",
									"    exp_length = pm.environment.get(\"test6length\");",
									"    exp_url = pm.environment.get(\"test2url\");",
									"    exp_id = pm.environment.get(\"test2id\");",
									"    exp_at_sea = pm.environment.get(\"test2at_sea\");",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['name']).to.equal(exp_name);",
									"    pm.expect(res['type']).to.equal(exp_type);",
									"    pm.expect(res['length'].toString()).to.equal(exp_length);",
									"    pm.expect(res['url']).to.equal(exp_url);",
									"    pm.expect(res['id'].toString()).to.equal(exp_id);",
									"    pm.expect(res['at_sea'].toString()).to.equal(exp_at_sea.toString());",
									"});"
								],
								"id": "201c6cd2-087c-450a-9ff8-3f72ab754473",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "f6f611e5-875f-4b6e-838c-d13be0214f3b",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/{{test2id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{test2id}}"
							]
						},
						"description": "Check Boat Updated Correctly in TEST 6"
					},
					"response": []
				}
			]
		},
		{
			"name": "Create & Read Slips",
			"description": "",
			"item": [
				{
					"name": "TEST 8: GET /slips/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// False until proven true",
									"pm.environment.set(\"test8\", false)",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response has 0 objects\", function () {",
									"    var length = Object.keys(pm.response.json()).length;",
									"    pm.expect(length).to.equal(0);",
									"    pm.environment.set(\"test8\", true)",
									"});",
									"",
									""
								],
								"id": "921c074f-6c4f-4677-83bb-0ebb8d8b2e8b",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set environmental variables.",
									"",
									"pm.environment.set(\"test9number\", 17);",
									"pm.environment.set(\"test9boat\", \"null\");",
									"pm.environment.set(\"test9boat_url\", \"null\");",
									"pm.environment.set(\"test9arrival_date\", \"null\");",
									"pm.environment.set(\"test9departure_history\", JSON.stringify([]));",
									"",
									"",
									"pm.environment.set(\"test13number\", 38);",
									""
								],
								"id": "37aeaad1-e5dd-4698-abd1-72c7cf8396af",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								""
							]
						},
						"description": "Get all boats"
					},
					"response": []
				},
				{
					"name": "TEST 9: POST /slips/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Initialize test9 response variables",
									"pm.environment.set(\"test9url\", \"\");",
									"pm.environment.set(\"test9id\", null);",
									"pm.environment.set(\"test9response\", null);",
									"",
									"pm.test(\"response is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches request\", function () {",
									"    exp_num = pm.environment.get(\"test9number\");",
									"    exp_boat = pm.environment.get(\"test9boat\");",
									"    exp_boat_url = pm.environment.get(\"test9boat_url\");",
									"    exp_arrival_date = pm.environment.get(\"test9arrival_date\");",
									"    exp_departure_history = pm.environment.get(\"test9departure_history\");",
									"    ",
									"    // console.log(\"num: \" + String(exp_num))",
									"    // console.log(\"exp_boat: \" + exp_boat)",
									"    // console.log(\"exp_boat_url: \" + exp_boat_url)",
									"    // console.log(\"exp_arrival_date: \" + exp_arrival_date)",
									"    // console.log(\"exp_departure_history: \" + exp_departure_history)",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['number'].toString()).to.equal(String(exp_num));",
									"    pm.expect(String(res['current_boat'])).to.equal(exp_boat);",
									"    pm.expect(String(res['current_boat_url'])).to.equal(exp_boat_url);",
									"    pm.expect(String(res['arrival_date'])).to.equal(exp_arrival_date);",
									"    pm.expect(JSON.stringify(res['departure_history'])).to.equal(exp_departure_history);",
									"    ",
									"    // Save URL and ID",
									"    pm.environment.set(\"test9url\", res['url']);",
									"    pm.environment.set(\"test9id\", res['id']);",
									"    ",
									"    // Save response as string",
									"    res_string = JSON.stringify(res);",
									"    pm.environment.set(\"test9response\", res_string);",
									"    ",
									"    pm.environment.set(\"test9\", true)",
									"});",
									""
								],
								"id": "d4c35887-c6df-43a3-b52e-ceec2289de12",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "046e8e06-8c44-4f5a-954a-2a766b1193ef",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"number\": {{test9number}}\n}"
						},
						"url": {
							"raw": "{{domain}}/slips/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								""
							]
						},
						"description": "Creat Slip"
					},
					"response": []
				},
				{
					"name": "TEST 10: GET {{test9url}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches test9 number\", function () {",
									"    exp_num = pm.environment.get(\"test9number\");",
									"    res = pm.response.json();",
									"    pm.expect(res['number'].toString()).to.equal(String(exp_num));",
									"});",
									"pm.test(\"response matches test9 boat ID\", function () {",
									"    exp_boat = pm.environment.get(\"test9boat\");",
									"    res = pm.response.json();",
									"    pm.expect(String(res['current_boat'])).to.equal(exp_boat);",
									"});",
									"pm.test(\"response matches test9 boat url\", function () {",
									"    exp_boat_url = pm.environment.get(\"test9boat_url\");",
									"    res = pm.response.json();",
									"    pm.expect(String(res['current_boat_url'])).to.equal(exp_boat_url);",
									"});",
									"",
									"pm.test(\"response matches test9 arrival_date\", function () {",
									"    exp_arrival_date = pm.environment.get(\"test9arrival_date\");",
									"    res = pm.response.json();",
									"    pm.expect(String(res['arrival_date'])).to.equal(exp_arrival_date);",
									"});",
									"",
									"pm.test(\"response matches test9 departure_history\", function () {",
									"    exp_departure_history = pm.environment.get(\"test9departure_history\");",
									"    res = pm.response.json();",
									"    pm.expect(JSON.stringify(res['departure_history'])).to.equal(exp_departure_history);",
									"});",
									"",
									"pm.test(\"response matches test9 url & id\", function () {",
									"    exp_url = pm.environment.get(\"test9url\");",
									"    exp_id = pm.environment.get(\"test9id\");",
									"    res = pm.response.json();",
									"    pm.expect(res['url']).to.equal(exp_url);",
									"    pm.expect(res['id']).to.equal(exp_id);",
									"});"
								],
								"id": "33a5cb6f-d370-48e9-a090-4f56879ed51f",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "be88062d-bc4e-4271-9ec7-703a27004afa",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{test9url}}",
							"host": [
								"{{test9url}}"
							]
						},
						"description": "Test URL from test 9"
					},
					"response": []
				},
				{
					"name": "TEST 11: GET /slips/{{test9id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches test9 data sent\", function () {",
									"    exp_num = pm.environment.get(\"test9number\");",
									"    exp_boat = pm.environment.get(\"test9boat\");",
									"    exp_boat_url = pm.environment.get(\"test9boat_url\");",
									"    exp_arrival_date = pm.environment.get(\"test9arrival_date\");",
									"    exp_departure_history = pm.environment.get(\"test9departure_history\");",
									"    exp_url = pm.environment.get(\"test9url\");",
									"    exp_id = pm.environment.get(\"test9id\");",
									"    ",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['number'].toString()).to.equal(String(exp_num));",
									"    pm.expect(String(res['current_boat'])).to.equal(exp_boat);",
									"    pm.expect(String(res['current_boat_url'])).to.equal(exp_boat_url);",
									"    pm.expect(String(res['arrival_date'])).to.equal(exp_arrival_date);",
									"    pm.expect(JSON.stringify(res['departure_history'])).to.equal(exp_departure_history);",
									"    pm.expect(res['url']).to.equal(exp_url);",
									"    pm.expect(res['id']).to.equal(exp_id);",
									"    ",
									"});"
								],
								"id": "46a03adb-d37e-4e32-b6a2-9ad17b23d9f3",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "f6f611e5-875f-4b6e-838c-d13be0214f3b",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/{{test9id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								"{{test9id}}"
							]
						},
						"description": "Test id from test 2"
					},
					"response": []
				},
				{
					"name": "TEST 12: GET /slips/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test 8 was successful', function() {",
									"    var_test8 = pm.environment.get(\"test8\");",
									"    exp_test8 = 'true';",
									"    ",
									"    pm.expect(exp_test8.toString()).to.equal(var_test8.toString());",
									"});",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response has 1 element that matches test9 data\", function () {",
									"    exp_num = pm.environment.get(\"test9number\");",
									"    exp_boat = pm.environment.get(\"test9boat\");",
									"    exp_boat_url = pm.environment.get(\"test9boat_url\");",
									"    exp_arrival_date = pm.environment.get(\"test9arrival_date\");",
									"    exp_departure_history = pm.environment.get(\"test9departure_history\");",
									"    exp_url = pm.environment.get(\"test9url\");",
									"    exp_id = pm.environment.get(\"test9id\");    ",
									"    ",
									"    // Test",
									"    res = pm.response.json();",
									"    slip = res[0];",
									"    pm.expect(slip['number'].toString()).to.equal(String(exp_num));",
									"    pm.expect(String(slip['current_boat'])).to.equal(exp_boat);",
									"    pm.expect(String(slip['current_boat_url'])).to.equal(exp_boat_url);",
									"    pm.expect(String(slip['arrival_date'])).to.equal(exp_arrival_date);",
									"    pm.expect(JSON.stringify(slip['departure_history'])).to.equal(exp_departure_history);",
									"    pm.expect(slip['url']).to.equal(exp_url);",
									"    pm.expect(slip['id']).to.equal(exp_id);",
									"",
									"});"
								],
								"id": "d60bb6ba-078e-4ecf-b5ca-1e7c34ac459b",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "9932c7db-9467-43be-a22b-2531d369ad8e",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								""
							]
						},
						"description": "Ensure new boat added to list of all boats"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"id": "45a7fe16-16de-43d5-9115-f0956bb31a5a",
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"id": "fc49f882-a598-44dc-ad1b-0d9d5c1b685b",
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Edit Slip",
			"description": "",
			"item": [
				{
					"name": "TEST 13: PATCH /slips/{test9id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Initialize test2 response variables",
									"// pm.environment.set(\"test13url\", null);",
									"// pm.environment.set(\"test13id\", null);",
									"// pm.environment.set(\"test13response\", null);",
									"",
									"pm.test(\"response is 200 ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches updated values\", function () {",
									"    exp_num = pm.environment.get(\"test13number\");",
									"    exp_boat = pm.environment.get(\"test9boat\");",
									"    exp_boat_url = pm.environment.get(\"test9boat_url\");",
									"    exp_arrival_date = pm.environment.get(\"test9arrival_date\");",
									"    exp_departure_history = pm.environment.get(\"test9departure_history\");",
									"    exp_url = pm.environment.get(\"test9url\");",
									"    exp_id = pm.environment.get(\"test9id\");",
									"    ",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['number'].toString()).to.equal(String(exp_num));",
									"    pm.expect(String(res['current_boat'])).to.equal(exp_boat);",
									"    pm.expect(String(res['current_boat_url'])).to.equal(exp_boat_url);",
									"    pm.expect(String(res['arrival_date'])).to.equal(exp_arrival_date);",
									"    pm.expect(JSON.stringify(res['departure_history'])).to.equal(exp_departure_history);",
									"    pm.expect(res['url']).to.equal(exp_url);",
									"    pm.expect(res['id']).to.equal(exp_id);",
									"});",
									""
								],
								"id": "388f79cd-28d4-4170-aee4-33e8bd7800e1",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "046e8e06-8c44-4f5a-954a-2a766b1193ef",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"number\": {{test13number}}\n}"
						},
						"url": {
							"raw": "{{domain}}/slips/{{test9id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								"{{test9id}}"
							]
						},
						"description": "Edit Slip"
					},
					"response": []
				},
				{
					"name": "TEST 14: GET /slips/{{test9id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches test 13 data sent\", function () {",
									"    ",
									"    exp_num = pm.environment.get(\"test13number\");",
									"    exp_boat = pm.environment.get(\"test9boat\");",
									"    exp_boat_url = pm.environment.get(\"test9boat_url\");",
									"    exp_arrival_date = pm.environment.get(\"test9arrival_date\");",
									"    exp_departure_history = pm.environment.get(\"test9departure_history\");",
									"    exp_url = pm.environment.get(\"test9url\");",
									"    exp_id = pm.environment.get(\"test9id\");",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['number'].toString()).to.equal(String(exp_num));",
									"    pm.expect(String(res['current_boat'])).to.equal(exp_boat);",
									"    pm.expect(String(res['current_boat_url'])).to.equal(exp_boat_url);",
									"    pm.expect(String(res['arrival_date'])).to.equal(exp_arrival_date);",
									"    pm.expect(JSON.stringify(res['departure_history'])).to.equal(exp_departure_history);",
									"    pm.expect(res['url']).to.equal(exp_url);",
									"    pm.expect(res['id']).to.equal(exp_id);",
									"});",
									""
								],
								"id": "cad48fb6-fe5b-4683-98c5-88a299cdb261",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "f6f611e5-875f-4b6e-838c-d13be0214f3b",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/{{test9id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								"{{test9id}}"
							]
						},
						"description": "Check Boat Updated Correctly in TEST 6"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"id": "32401f68-7770-411a-a6d3-72e910a24814",
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"id": "5bc1349b-bcbb-4807-969f-489da73a6433",
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Boat Arrival 1",
			"description": "",
			"item": [
				{
					"name": "TEST 15: GET /slips/{{test9id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches test9 data sent\", function () {",
									"    exp_num = pm.environment.get(\"test13number\");",
									"    exp_boat = null;",
									"    exp_boat_url = null;",
									"    exp_arrival_date = null;",
									"    // exp_departure_history = pm.environment.get(\"test9departure_history\");",
									"    exp_url = pm.environment.get(\"test9url\");",
									"    exp_id = pm.environment.get(\"test9id\");",
									"    ",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['number'].toString()).to.equal(String(exp_num));",
									"    pm.expect(res['current_boat']).to.equal(exp_boat);",
									"    pm.expect(res['current_boat_url']).to.equal(exp_boat_url);",
									"    pm.expect(res['arrival_date']).to.equal(exp_arrival_date);",
									"    // pm.expect(JSON.stringify(res['departure_history'])).to.equal(exp_departure_history);",
									"    pm.expect(res['url']).to.equal(exp_url);",
									"    pm.expect(res['id']).to.equal(exp_id);",
									"    ",
									"    ",
									"    pm.environment.set(\"test15slip\", JSON.stringify(res));",
									"    ",
									"});"
								],
								"id": "60901b1d-4371-4ad0-8ba2-51c4f8b1b8eb",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"test17_arrival_date\", \"1/15/2016\");",
									"pm.environment.set(\"test20_departure_date\", \"2/5/2016\");",
									""
								],
								"id": "922388fa-7972-40c5-a1d3-a8ea1379bd75",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/{{test9id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								"{{test9id}}"
							]
						},
						"description": "Verify Slip is empty from test 9 still"
					},
					"response": []
				},
				{
					"name": "TEST 16: GET /boats/{{test2id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches test2/6 data sent\", function () {",
									"    exp_name = pm.environment.get(\"test6name\");",
									"    exp_type = pm.environment.get(\"test6type\");",
									"    exp_length = pm.environment.get(\"test6length\");",
									"    exp_url = pm.environment.get(\"test2url\");",
									"    exp_id = pm.environment.get(\"test2id\");",
									"    exp_at_sea = true;",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['name']).to.equal(exp_name);",
									"    pm.expect(res['type']).to.equal(exp_type);",
									"    pm.expect(res['length'].toString()).to.equal(exp_length);",
									"    pm.expect(res['url']).to.equal(exp_url);",
									"    pm.expect(res['id'].toString()).to.equal(exp_id);",
									"    pm.expect(res['at_sea']).to.equal(exp_at_sea);",
									"",
									"    pm.environment.set(\"test16boat\", JSON.stringify(res));",
									"});"
								],
								"id": "803731e3-dffa-45a4-b3ea-3b82c3b3ca1f",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "f6f611e5-875f-4b6e-838c-d13be0214f3b",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/{{test2id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{test2id}}"
							]
						},
						"description": "Verify boat is at sea"
					},
					"response": []
				},
				{
					"name": "TEST 17: PUT /boats/{{test2id}}/slips/{{test9id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Delete boat and Repeat",
									"pm.test(\"response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"id": "d44104e7-c422-49ee-878b-6833c9e83d11",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"arrival_date\": \"{{test17_arrival_date}}\"\n}"
						},
						"url": {
							"raw": "{{domain}}/boats/{{test2id}}/slips/{{test9id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{test2id}}",
								"slips",
								"{{test9id}}"
							]
						},
						"description": "dock at sea boat with empty slip"
					},
					"response": []
				},
				{
					"name": "TEST 18: GET /boats/{{test2id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches test16 data sent and at_sea false\", function () {",
									"    boat_string = pm.environment.get(\"test16boat\");",
									"    boat = JSON.parse(boat_string);",
									"    exp_name = boat[\"name\"]",
									"    exp_type = boat[\"type\"]",
									"    exp_length = boat[\"length\"]",
									"    exp_url = boat[\"url\"]",
									"    exp_id = boat[\"id\"]",
									"    exp_at_sea = false;",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['name']).to.equal(exp_name);",
									"    pm.expect(res['type']).to.equal(exp_type);",
									"    pm.expect(res['length']).to.equal(exp_length);",
									"    pm.expect(res['url']).to.equal(exp_url);",
									"    pm.expect(res['id'].toString()).to.equal(exp_id);",
									"    pm.expect(res['at_sea']).to.equal(exp_at_sea);",
									"    ",
									"    pm.environment.set(\"test18boat\", JSON.stringify(res));",
									"    pm.environment.set(\"test18\", true); // Verified Boat is NOT AT SEA",
									"    ",
									"    ",
									"});"
								],
								"id": "8c9c6610-6778-4782-a497-a718d41b90b7",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "f6f611e5-875f-4b6e-838c-d13be0214f3b",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/{{test2id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{test2id}}"
							]
						},
						"description": "Verify boat is at sea"
					},
					"response": []
				},
				{
					"name": "TEST 19: GET /slips/{{test9id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches test15 data sent but new boat\", function () {",
									"    boat_string = pm.environment.get(\"test16boat\");",
									"    boat = JSON.parse(boat_string);",
									"    ",
									"    slip_string = pm.environment.get(\"test15slip\");",
									"    slip = JSON.parse(slip_string);",
									"    ",
									"    // Expected Values",
									"    exp_boat_url = boat[\"url\"]",
									"    exp_boat = boat[\"id\"]",
									"    exp_arrival_date = pm.environment.get(\"test17_arrival_date\");",
									"    exp_departure_history = slip[\"departure_history\"];",
									"    exp_num = slip[\"number\"];",
									"    exp_url = slip[\"url\"];",
									"    exp_id = slip[\"id\"];",
									"    ",
									"    res = pm.response.json();",
									"    actual_hist = JSON.stringify(res['departure_history']);",
									"    // console.log(res)",
									"    pm.expect(res['number'].toString()).to.equal(String(exp_num));",
									"    pm.expect(res['current_boat']).to.equal(exp_boat);",
									"    pm.expect(res['current_boat_url']).to.equal(exp_boat_url);",
									"    pm.expect(res['arrival_date']).to.equal(exp_arrival_date);",
									"    pm.expect(actual_hist).to.equal(JSON.stringify(exp_departure_history));",
									"    pm.expect(res['url']).to.equal(exp_url);",
									"    pm.expect(res['id']).to.equal(exp_id);",
									"    ",
									"    pm.environment.set(\"test19slip\", JSON.stringify(res));",
									"    pm.environment.set(\"test19actual_hist\", actual_hist)",
									"    pm.environment.set(\"test19\", true); // Verified SLIP has boat information",
									"});"
								],
								"id": "e7e1d7b0-d63e-4e8b-ac3b-f9a58263afb7",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "f5185f9d-053b-48a2-9673-57f35a2eecb3",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/{{test9id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								"{{test9id}}"
							]
						},
						"description": "Slip has boat and boat url and arrival_date"
					},
					"response": []
				},
				{
					"name": "TEST 20: DELETE /boats/{{test2id}}/slips/{{test9id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d44104e7-c422-49ee-878b-6833c9e83d11",
								"type": "text/javascript",
								"exec": [
									"// Delete boat and Repeat",
									"pm.test(\"response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cb0daa19-7e1c-4be1-a0ec-9e4e9dd7de55",
								"type": "text/javascript",
								"exec": [
									"var test18 = pm.environment.get(\"test18\");",
									"var test19 = pm.environment.get(\"test19\");",
									"",
									"// Skip this folder",
									"if ( ( test18 === false ) || (test19 === false ) ) {",
									"    console.log(\"Skipping Boat Departure Test\");",
									"    postman.setNextRequest(null);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{domain}}/boats/{{test2id}}/slips/{{test9id}}?departure={{test20_departure_date}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{test2id}}",
								"slips",
								"{{test9id}}"
							],
							"query": [
								{
									"key": "departure",
									"value": "{{test20_departure_date}}",
									"equals": true
								}
							]
						},
						"description": "Set boat to at sea boat and empty the slip"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"id": "1e34c564-eec2-433b-b506-720cf8cff63c",
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"id": "744eed82-2e76-4d3d-a7fc-c2410f8d9c76",
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Boat Departure 1",
			"description": "",
			"item": [
				{
					"name": "TEST 21: GET /slips/{{test9id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check again result of Test 19",
									"var slip = JSON.parse(pm.environment.get(\"test19slip\"));",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches test19 number\", function () {",
									"    exp_num = slip[\"number\"]",
									"    res = pm.response.json();",
									"    pm.expect(res['number'].toString()).to.equal(String(exp_num));",
									"});",
									"pm.test(\"response matches test19 boat ID\", function () {",
									"    exp_boat = String(null);",
									"    res = pm.response.json();",
									"    pm.expect(String(res['current_boat'])).to.equal(exp_boat);",
									"});",
									"pm.test(\"response matches test9 boat url\", function () {",
									"    exp_boat_url = String(null);",
									"    res = pm.response.json();",
									"    pm.expect(String(res['current_boat_url'])).to.equal(exp_boat_url);",
									"});",
									"",
									"pm.test(\"response matches test9 arrival_date\", function () {",
									"    exp_arrival_date = String(null); ",
									"    res = pm.response.json();",
									"    pm.expect(String(res['arrival_date'])).to.equal(exp_arrival_date);",
									"});",
									"",
									"pm.test(\"response matches test19 departure_history\", function () {",
									"    // Parse Departure History",
									"    var departure_date = pm.environment.get(\"test20_departure_date\");",
									"    // console.log(pm.environment.get(\"test19actual_hist\"));",
									"    exp_departure_history = JSON.parse(pm.environment.get(\"test19actual_hist\"))",
									"    console.log(\"history: \" + exp_departure_history)",
									"    console.log(exp_departure_history);",
									"    ",
									"    if (typeof exp_departure_history == \"string\") {",
									"        exp_departure_history = JSON.parse(exp_departure_history)",
									"    }",
									"    exp_departure_history.push({\"departed_boat\": slip[\"current_boat\"], \"departure_date\": departure_date });",
									"    console.log(exp_departure_history)",
									"    actual = res['departure_history'];",
									"    actual_departure_history = JSON.parse(actual);",
									"    ",
									"    for ( i = 0; i < actual_departure_history.length; i++ ) {",
									"        console.log(actual_departure_history[i][\"departed_boat\"]);",
									"        console.log(exp_departure_history[i][\"departed_boat\"]);",
									"        console.log(exp_departure_history[i][\"departure_date\"]);",
									"        console.log(actual_departure_history[i][\"departure_date\"]);",
									"        ",
									"        pm.expect(actual_departure_history[i][\"departed_boat\"]).to.equal(exp_departure_history[i][\"departed_boat\"]);",
									"        pm.expect(actual_departure_history[i][\"departure_date\"]).to.equal(exp_departure_history[i][\"departure_date\"]);",
									"    }",
									"    // pm.expect(actual_departure_history).to.equal(exp_departure_history);",
									"});",
									"",
									"pm.test(\"response matches test9 url & id\", function () {",
									"    exp_url = slip[\"url\"];",
									"    exp_id = slip[\"id\"];",
									"    res = pm.response.json();",
									"    pm.expect(res['url']).to.equal(exp_url);",
									"    pm.expect(res['id']).to.equal(exp_id);",
									"});"
								],
								"id": "a44241c6-853f-4cc3-bcb0-ab5229a3dfc0",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "f6f611e5-875f-4b6e-838c-d13be0214f3b",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/{{test9id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								"{{test9id}}"
							]
						},
						"description": "Verify Slip is Empty and Depature History is updated"
					},
					"response": []
				},
				{
					"name": "TEST 22: GET /boats/{{test2id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response is at sea\", function () {",
									"    exp_at_sea = true;",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['at_sea']).to.equal(exp_at_sea);",
									"",
									"    pm.environment.set(\"test24boat\", JSON.stringify(res));",
									"    pm.environment.set(\"test24\", true);",
									"});"
								],
								"id": "d835c158-687f-49df-a3a5-895b0a9e56d2",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "f6f611e5-875f-4b6e-838c-d13be0214f3b",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/{{test2id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{test2id}}"
							]
						},
						"description": "Verify boat is at sea"
					},
					"response": []
				}
			]
		},
		{
			"name": "Occupied Slip Delete",
			"description": "",
			"item": [
				{
					"name": "TEST 23: PUT /boats/{{test2id}}/slips/{{test9id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Delete boat and Repeat",
									"pm.test(\"response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"id": "d44104e7-c422-49ee-878b-6833c9e83d11",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"test23_arrival_date\", \"03/15/2016\");"
								],
								"id": "6def7402-66b4-467e-8136-328b6ec6756c",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"arrival_date\": \"{{test23_arrival_date}}\"\n}"
						},
						"url": {
							"raw": "{{domain}}/boats/{{test2id}}/slips/{{test9id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{test2id}}",
								"slips",
								"{{test9id}}"
							]
						},
						"description": "dock \"at sea boat\" with empty slip"
					},
					"response": []
				},
				{
					"name": "TEST 24: GET /slips/{{test9id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches test9 data sent\", function () {",
									"    exp_num = pm.environment.get(\"test13number\");",
									"    exp_boat = null;",
									"    exp_boat_url = null;",
									"    exp_arrival_date = null;",
									"    // exp_departure_history = pm.environment.get(\"test9departure_history\");",
									"    exp_url = pm.environment.get(\"test9url\");",
									"    exp_id = pm.environment.get(\"test9id\");",
									"    ",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['number'].toString()).to.equal(String(exp_num));",
									"    pm.expect(res['current_boat']).to.not.equal(exp_boat);",
									"    pm.expect(res['current_boat_url']).to.not.equal(exp_boat_url);",
									"    pm.expect(res['arrival_date']).to.not.equal(exp_arrival_date);",
									"    // pm.expect(JSON.stringify(res['departure_history'])).to.equal(exp_departure_history);",
									"    pm.expect(res['url']).to.equal(exp_url);",
									"    pm.expect(res['id']).to.equal(exp_id);",
									"    ",
									"    ",
									"    pm.environment.set(\"test23slip\", JSON.stringify(res));",
									"    pm.environment.set(\"test23\", true);",
									"});"
								],
								"id": "93d7326e-13ca-4b21-8529-97fdd7f83f45",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"test17_arrival_date\", \"1/15/2016\");",
									"pm.environment.set(\"test20_departure_date\", \"2/5/2016\");",
									""
								],
								"id": "922388fa-7972-40c5-a1d3-a8ea1379bd75",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/{{test9id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								"{{test9id}}"
							]
						},
						"description": "Verify Slip is NOT empty"
					},
					"response": []
				},
				{
					"name": "TEST 25: GET /boats/{{test2id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response is not at sea\", function () {",
									"    exp_at_sea = false;",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['at_sea']).to.equal(exp_at_sea);",
									"",
									"    pm.environment.set(\"test24boat\", JSON.stringify(res));",
									"    pm.environment.set(\"test24\", true);",
									"});"
								],
								"id": "5c5bfcd8-c090-4cb6-a660-622798c33e62",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "f6f611e5-875f-4b6e-838c-d13be0214f3b",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/{{test2id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{test2id}}"
							]
						},
						"description": "Verify boat is at sea"
					},
					"response": []
				},
				{
					"name": "TEST 26: DELETE /slips/{{test9id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Delete boat and Repeat",
									"pm.test(\"response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"id": "2b13008c-7f3c-490d-a1cf-a5dd79af886f",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/{{test9id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								"{{test9id}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "TEST 27: GET /slips/{{test9id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"});"
								],
								"id": "f4185288-c3b5-4413-8daa-42aacfa60367",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"test17_arrival_date\", \"1/15/2016\");",
									"pm.environment.set(\"test20_departure_date\", \"2/5/2016\");",
									""
								],
								"id": "922388fa-7972-40c5-a1d3-a8ea1379bd75",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/{{test9id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								"{{test9id}}"
							]
						},
						"description": "Verify Slip is deleted"
					},
					"response": []
				},
				{
					"name": "TEST 28: GET /boats/{{test2id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response is at sea\", function () {",
									"    exp_at_sea = true;",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['at_sea']).to.equal(exp_at_sea);",
									"",
									"    pm.environment.set(\"test24boat\", JSON.stringify(res));",
									"    pm.environment.set(\"test24\", true);",
									"});"
								],
								"id": "d835c158-687f-49df-a3a5-895b0a9e56d2",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "f6f611e5-875f-4b6e-838c-d13be0214f3b",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/{{test2id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{test2id}}"
							]
						},
						"description": "Verify boat is at sea"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"id": "1e34c564-eec2-433b-b506-720cf8cff63c",
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"id": "744eed82-2e76-4d3d-a7fc-c2410f8d9c76",
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Docked Boat is Deleted",
			"description": "",
			"item": [
				{
					"name": "POST /boats/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches request\", function () {",
									"    exp_name = pm.environment.get(\"name\");",
									"    exp_type = pm.environment.get(\"type\");",
									"    exp_length = pm.environment.get(\"length\");",
									"    exp_at_sea = true;",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['name']).to.equal(exp_name);",
									"    pm.expect(res['type']).to.equal(exp_type);",
									"    pm.expect(res['length'].toString()).to.equal(exp_length);",
									"    pm.expect(res['at_sea']).to.equal(exp_at_sea);",
									"    ",
									"    // Save URL and ID",
									"    pm.environment.set(\"boat_url\", res['url']);",
									"    pm.environment.set(\"boat_id\", res['id']);",
									"    ",
									"    // Save response as string",
									"    res_string = JSON.stringify(res);",
									"    pm.environment.set(\"preBoat\", res_string);",
									"    ",
									"});",
									"",
									""
								],
								"id": "3596d6fa-51a9-4032-8ce0-236a47d20c13",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "046e8e06-8c44-4f5a-954a-2a766b1193ef",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{name}}\",\n  \"type\": \"{{type}}\",\n  \"length\": {{length}}\n}"
						},
						"url": {
							"raw": "{{domain}}/boats",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /slips/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fbda2336-7b1c-45dd-b77a-14faa2e4dfeb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches request\", function () {",
									"    exp_number = pm.environment.get(\"number\");",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['number'].toString()).to.equal(exp_number);",
									"    ",
									"    // Save URL and ID",
									"    pm.environment.set(\"slip_url\", res['url']);",
									"    pm.environment.set(\"slip_id\", res['id']);",
									"    ",
									"    // Save response as string",
									"    res_string = JSON.stringify(res);",
									"    pm.environment.set(\"preSlip\", res_string);",
									"    console.log(res_string);",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "046e8e06-8c44-4f5a-954a-2a766b1193ef",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"number\": {{number}}\n}"
						},
						"url": {
							"raw": "{{domain}}/slips",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "DOCK BOAT PUT /boats/{{boat_id}}/slips/{{slip_id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Delete boat and Repeat",
									"pm.test(\"response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"id": "d44104e7-c422-49ee-878b-6833c9e83d11",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "938b103f-90ad-4a20-af58-59a7f475222c",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"arrival_date\": \"{{arrival_date}}\"\n}"
						},
						"url": {
							"raw": "{{domain}}/boats/{{boat_id}}/slips/{{slip_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{boat_id}}",
								"slips",
								"{{slip_id}}"
							]
						},
						"description": "dock \"at sea boat\" with empty slip"
					},
					"response": []
				},
				{
					"name": "BOAT IS DOCKED GET /boats/{{boat_id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e56d94e4-cc20-436b-832d-1298e39c91f4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches test16 data sent and at_sea false\", function () {",
									"    boat_string = pm.environment.get(\"preBoat\");",
									"    boat = JSON.parse(boat_string);",
									"    exp_name = boat[\"name\"]",
									"    exp_type = boat[\"type\"]",
									"    exp_length = boat[\"length\"]",
									"    exp_url = boat[\"url\"]",
									"    exp_id = boat[\"id\"]",
									"    exp_at_sea = false;",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['name']).to.equal(exp_name);",
									"    pm.expect(res['type']).to.equal(exp_type);",
									"    pm.expect(res['length']).to.equal(exp_length);",
									"    pm.expect(res['url']).to.equal(exp_url);",
									"    pm.expect(res['id'].toString()).to.equal(exp_id);",
									"    pm.expect(res['at_sea']).to.equal(exp_at_sea);",
									"    ",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f6f611e5-875f-4b6e-838c-d13be0214f3b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/{{boat_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{boat_id}}"
							]
						},
						"description": "Verify boat is NOT at sea"
					},
					"response": []
				},
				{
					"name": "SLIP OCCUPIED GET /slips/{{slip_id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b79c029-0429-4505-a87a-3a81dcb3d762",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function() {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches\", function() {",
									"    boat_string = pm.environment.get(\"preBoat\");",
									"    boat = JSON.parse(boat_string);",
									"    console.log(boat_string);",
									"    slip_string = pm.environment.get(\"preSlip\");",
									"    slip = JSON.parse(slip_string);",
									"    console.log(slip_string);",
									"    // Expected Values",
									"    exp_boat_url = boat[\"url\"]",
									"    exp_boat = boat[\"id\"]",
									"    exp_arrival_date = pm.environment.get(\"arrival_date\");",
									"",
									"    exp_departure_history = slip[\"departure_history\"];",
									"    exp_num = slip[\"number\"];",
									"    exp_url = slip[\"url\"];",
									"    exp_id = slip[\"id\"];",
									"",
									"    res = pm.response.json();",
									"",
									"    actual_hist = JSON.stringify(res['departure_history']);",
									"",
									"    // console.log(res)",
									"    pm.expect(res['number']).to.equal(exp_num);",
									"    pm.expect(res['current_boat']).to.equal(exp_boat);",
									"    pm.expect(res['current_boat_url']).to.equal(exp_boat_url);",
									"    pm.expect(res['arrival_date']).to.equal(exp_arrival_date);",
									"    pm.expect(actual_hist).to.equal(JSON.stringify(exp_departure_history));",
									"    pm.expect(res['url']).to.equal(exp_url);",
									"    pm.expect(res['id']).to.equal(exp_id);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5185f9d-053b-48a2-9673-57f35a2eecb3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/{{slip_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								"{{slip_id}}"
							]
						},
						"description": "Slip has boat and boat url and arrival_date"
					},
					"response": []
				},
				{
					"name": "DELETE BOAT - DELETE /boats/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e10249a-4d2e-414b-93d0-badaaf5e5aad",
								"type": "text/javascript",
								"exec": [
									"// Delete boat and Repeat",
									"pm.test(\"response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/{{boat_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{boat_id}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "BOAT IS DELETED (404) GET /boats/{{boat_id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								],
								"id": "2fb5ac6a-004c-42fb-b19e-44d3833e3d6c",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "f6f611e5-875f-4b6e-838c-d13be0214f3b",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/{{boat_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{boat_id}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "SLIP EMPTY GET /slips/{{slip_id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "386e4b84-747a-49eb-8f21-2b9332ba9acb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches test9 data sent\", function () {",
									"    exp_num = pm.environment.get(\"number\");",
									"    exp_boat = null;",
									"    exp_boat_url = null;",
									"    exp_arrival_date = null;",
									"    exp_url = pm.environment.get(\"slip_url\");",
									"    exp_id = pm.environment.get(\"slip_id\");",
									"    ",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['number'].toString()).to.equal(String(exp_num));",
									"    pm.expect(res['current_boat']).to.equal(exp_boat);",
									"    pm.expect(res['current_boat_url']).to.equal(exp_boat_url);",
									"    pm.expect(res['arrival_date']).to.equal(exp_arrival_date);",
									"    pm.expect(res['url']).to.equal(exp_url);",
									"    pm.expect(res['id']).to.equal(exp_id);",
									"    ",
									"    ",
									"    pm.environment.set(\"test15slip\", JSON.stringify(res));",
									"    ",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f5185f9d-053b-48a2-9673-57f35a2eecb3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/{{slip_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								"{{slip_id}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set environmental variables.",
							"// PRE-VALUES",
							"pm.environment.set(\"name\", \"Boat Name 1\");",
							"pm.environment.set(\"type\", \"Boat Type 1\");",
							"pm.environment.set(\"length\", \"10\");",
							"",
							"pm.environment.set(\"number\", \"17\");",
							"",
							"pm.environment.set(\"false_at_sea\", false);",
							"pm.environment.set(\"true_at_sea\", true);",
							"",
							"pm.environment.set(\"arrival_date\", \"1/2/1999\");"
						],
						"id": "21bcf9b8-b549-4361-8190-d271e914417a",
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"id": "acceac88-3a3c-472f-a1d0-ceb248561b20",
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Create Rejections",
			"description": "",
			"item": [
				{
					"name": "/slips/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var domain = pm.environment.get(\"domain\");",
									"var preBOATS = pm.environment.get(\"pre-BOATS\");",
									"",
									"postman.clearEnvironmentVariables();",
									"pm.environment.set(\"domain\", domain);",
									"// if (typeof domain === undefined) {",
									"    ",
									"// }",
									"// else {",
									"//     pm.environment.set(\"domain\", \"http://localhost:8080\");",
									"// }",
									"",
									"pm.environment.set(\"pre-BOATS\", preBOATS);",
									""
								],
								"id": "8de0a5c5-cc6d-4fa2-b260-e6687767282b",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"    ",
									"    // Save Slips Response",
									"    res = pm.response.json();",
									"    pm.environment.set(\"pre-SLIPS\", JSON.stringify(res))",
									"});",
									"",
									"",
									""
								],
								"id": "d522cbe3-6a21-45b7-81f6-53ad8f4bd992",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/boats/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var domain = pm.environment.get(\"domain\");",
									"var preSLIPS = pm.environment.get(\"pre-SLIPS\");",
									"",
									"postman.clearEnvironmentVariables();",
									"// if (typeof domain == 'undefined') {",
									"    pm.environment.set(\"domain\", domain);",
									"// }",
									"// else {",
									"//     pm.environment.set(\"domain\", \"http://localhost:8080\");",
									"// }",
									"",
									"pm.environment.set(\"pre-SLIPS\", preSLIPS);",
									"",
									""
								],
								"id": "1c709b3f-a807-477e-aa88-0c0545f7903d",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"    ",
									"    // Save Boats Response",
									"    res = pm.response.json();",
									"    pm.environment.set(\"pre-BOATS\", JSON.stringify(res))",
									"});",
									""
								],
								"id": "ad318861-9714-498f-bad6-449d3e6984e9",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "400 - Extra Info - POST /boats/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 400 Created\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								],
								"id": "1c9f28ea-310f-4037-b513-869cde5268f5",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"good_name\", \"NameName\");",
									"pm.environment.set(\"good_length\", 10);",
									"pm.environment.set(\"good_type\", \"canoe\");",
									"",
									"pm.environment.set(\"false_at_sea\", false);",
									"pm.environment.set(\"true_at_sea\", true);"
								],
								"id": "a6cc4077-db51-4ef8-9e63-98de1a41f34c",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{good_name}}\",\n  \"type\": \"{{good_type}}\",\n  \"length\": {{good_length}},\n  \"extra\": \"Nonsense\"\n}"
						},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": "400 - Extra Info - POST /slips/"
					},
					"response": []
				},
				{
					"name": "Verify /boats/ ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "463880e8-8e39-46ac-9f96-1e9e6385a48e",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches pre exactly\", function() {",
									"    res = pm.response.json();",
									"    console.log(res);",
									"    exp = JSON.parse(pm.environment.get(\"pre-BOATS\"));",
									"",
									"    // Compare Pre vs. Post",
									"    for (i = 0; i < res.length; i++ ) {",
									"        pm.expect(res[i][\"id\"]).to.equal(exp[i][\"id\"]);",
									"        pm.expect(res[i][\"url\"]).to.equal(exp[i][\"url\"]);",
									"        pm.expect(res[i][\"length\"]).to.equal(exp[i][\"length\"]);",
									"        pm.expect(res[i][\"name\"]).to.equal(exp[i][\"name\"]);",
									"        pm.expect(res[i][\"type\"]).to.equal(exp[i][\"type\"]);",
									"        pm.expect(res[i][\"at_sea\"]).to.equal(exp[i][\"at_sea\"]);",
									"    } ",
									"});"
								],
								"id": "795c0d73-a7ef-4b0e-994b-4adf37e210b6",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "400 - Extra Info - POST /slips/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 400 Created\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								],
								"id": "6f8a8115-680c-4e20-add3-0bf25d5bb1f4",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"good_number\", 17);",
									"pm.environment.set(\"null_boat\", \"null\");",
									"pm.environment.set(\"null_boat_url\", \"null\");",
									"pm.environment.set(\"null_arrival_date\", \"null\");",
									"pm.environment.set(\"empty_departure_history\", JSON.stringify([]));"
								],
								"id": "1fcf985e-72fd-41aa-bbfb-244e6a131c84",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"number\": {{good_number}},\n  \"extra\": \"non-sense\"\n}"
						},
						"url": {
							"raw": "{{domain}}/slips/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								""
							]
						},
						"description": "400 - Extra Info - POST /slips/"
					},
					"response": []
				},
				{
					"name": "Verify /slips/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "463880e8-8e39-46ac-9f96-1e9e6385a48e",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches pre exactly\", function() {",
									"    res = pm.response.json();",
									"    // console.log(res);",
									"    exp = JSON.parse(pm.environment.get(\"pre-SLIPS\"));",
									"",
									"    // Compare Pre vs. Post",
									"    for (i = 0; i < res.length; i++ ) {",
									"        pm.expect(res[i][\"id\"]).to.equal(exp[i][\"id\"]);",
									"        pm.expect(res[i][\"url\"]).to.equal(exp[i][\"url\"]);",
									"        pm.expect(res[i][\"number\"]).to.equal(exp[i][\"number\"]);",
									"        pm.expect(res[i][\"current_boat\"]).to.equal(exp[i][\"current_boat\"]);",
									"        pm.expect(res[i][\"current_boat_url\"]).to.equal(exp[i][\"current_boat_url\"]);",
									"        ",
									"        // Departure History matches",
									"        exp_departure_history = exp[i][\"departure_history\"]",
									"        console.log(typeof(exp_departure_history));",
									"        actual_departure_history = res[i][\"departure_history\"]",
									"        ",
									"        // if (typeof exp_departure_history == \"string\") {",
									"        //     exp_departure_history = JSON.parse(exp_departure_history)",
									"        // }",
									"        // if (typeof actual_departure_history == \"string\") {",
									"        //     actual_departure_history = JSON.parse(actual_departure_history)",
									"        // }",
									"    ",
									"    ",
									"        // for ( i = 0; i < actual_departure_history.length; i++ ) {",
									"        //     pm.expect(actual_departure_history[i][\"departed_boat\"]).to.equal(exp_departure_history[i][\"departed_boat\"]);",
									"        //     pm.expect(actual_departure_history[i][\"departure_date\"]).to.equal(exp_departure_history[i][\"departure_date\"]);",
									"        // }",
									"    } ",
									"});"
								],
								"id": "d09f5123-a2c5-44d0-9629-56e96e00b753",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "400 - Invalid Datatype - POST /boats/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 400 Created\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								],
								"id": "1c9f28ea-310f-4037-b513-869cde5268f5",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"good_name\", \"NameName\");",
									"pm.environment.set(\"good_length\", 10);",
									"pm.environment.set(\"good_type\", \"canoe\");",
									"",
									"pm.environment.set(\"false_at_sea\", false);",
									"pm.environment.set(\"true_at_sea\", true);"
								],
								"id": "a6cc4077-db51-4ef8-9e63-98de1a41f34c",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{good_name}}\",\n  \"type\": \"{{good_type}}\",\n  \"length\": \"seventeen\"\n}"
						},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Verify /boats/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "463880e8-8e39-46ac-9f96-1e9e6385a48e",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches pre exactly\", function() {",
									"    res = pm.response.json();",
									"    console.log(res);",
									"    exp = JSON.parse(pm.environment.get(\"pre-BOATS\"));",
									"",
									"    // Compare Pre vs. Post",
									"    for (i = 0; i < res.length; i++ ) {",
									"        pm.expect(res[i][\"id\"]).to.equal(exp[i][\"id\"]);",
									"        pm.expect(res[i][\"url\"]).to.equal(exp[i][\"url\"]);",
									"        pm.expect(res[i][\"length\"]).to.equal(exp[i][\"length\"]);",
									"        pm.expect(res[i][\"name\"]).to.equal(exp[i][\"name\"]);",
									"        pm.expect(res[i][\"type\"]).to.equal(exp[i][\"type\"]);",
									"        pm.expect(res[i][\"at_sea\"]).to.equal(exp[i][\"at_sea\"]);",
									"    } ",
									"});"
								],
								"id": "795c0d73-a7ef-4b0e-994b-4adf37e210b6",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "400 - Invalid Data - POST /slips/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 400 Created\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								],
								"id": "6f8a8115-680c-4e20-add3-0bf25d5bb1f4",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"good_number\", 17);",
									"pm.environment.set(\"null_boat\", \"null\");",
									"pm.environment.set(\"null_boat_url\", \"null\");",
									"pm.environment.set(\"null_arrival_date\", \"null\");",
									"pm.environment.set(\"empty_departure_history\", JSON.stringify([]));"
								],
								"id": "1fcf985e-72fd-41aa-bbfb-244e6a131c84",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"number\": \"non-sense\"\n}"
						},
						"url": {
							"raw": "{{domain}}/slips/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								""
							]
						},
						"description": "400 - Extra Info - POST /slips/"
					},
					"response": []
				},
				{
					"name": "Verify /slips/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "463880e8-8e39-46ac-9f96-1e9e6385a48e",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches pre exactly\", function() {",
									"    res = pm.response.json();",
									"    // console.log(res);",
									"    exp = JSON.parse(pm.environment.get(\"pre-SLIPS\"));",
									"",
									"    // Compare Pre vs. Post",
									"    for (i = 0; i < res.length; i++ ) {",
									"        pm.expect(res[i][\"id\"]).to.equal(exp[i][\"id\"]);",
									"        pm.expect(res[i][\"url\"]).to.equal(exp[i][\"url\"]);",
									"        pm.expect(res[i][\"number\"]).to.equal(exp[i][\"number\"]);",
									"        pm.expect(res[i][\"current_boat\"]).to.equal(exp[i][\"current_boat\"]);",
									"        pm.expect(res[i][\"current_boat_url\"]).to.equal(exp[i][\"current_boat_url\"]);",
									"        ",
									"        // Departure History matches",
									"        exp_departure_history = exp[i][\"departure_history\"]",
									"        console.log(typeof(exp_departure_history));",
									"        actual_departure_history = res[i][\"departure_history\"]",
									"        ",
									"        // if (typeof exp_departure_history == \"string\") {",
									"        //     exp_departure_history = JSON.parse(exp_departure_history)",
									"        // }",
									"        // if (typeof actual_departure_history == \"string\") {",
									"        //     actual_departure_history = JSON.parse(actual_departure_history)",
									"        // }",
									"    ",
									"    ",
									"        // for ( i = 0; i < actual_departure_history.length; i++ ) {",
									"        //     pm.expect(actual_departure_history[i][\"departed_boat\"]).to.equal(exp_departure_history[i][\"departed_boat\"]);",
									"        //     pm.expect(actual_departure_history[i][\"departure_date\"]).to.equal(exp_departure_history[i][\"departure_date\"]);",
									"        // }",
									"    } ",
									"});"
								],
								"id": "d09f5123-a2c5-44d0-9629-56e96e00b753",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "400 - Too Little 1 - POST /boats/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 400 Created\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								],
								"id": "1c9f28ea-310f-4037-b513-869cde5268f5",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"good_name\", \"NameName\");",
									"pm.environment.set(\"good_length\", 10);",
									"pm.environment.set(\"good_type\", \"canoe\");",
									"",
									"pm.environment.set(\"false_at_sea\", false);",
									"pm.environment.set(\"true_at_sea\", true);"
								],
								"id": "a6cc4077-db51-4ef8-9e63-98de1a41f34c",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{good_name}}\",\n  \"type\": \"{{good_type}}\",\n}"
						},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Verify /boats/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "463880e8-8e39-46ac-9f96-1e9e6385a48e",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches pre exactly\", function() {",
									"    res = pm.response.json();",
									"    console.log(res);",
									"    exp = JSON.parse(pm.environment.get(\"pre-BOATS\"));",
									"",
									"    // Compare Pre vs. Post",
									"    for (i = 0; i < res.length; i++ ) {",
									"        pm.expect(res[i][\"id\"]).to.equal(exp[i][\"id\"]);",
									"        pm.expect(res[i][\"url\"]).to.equal(exp[i][\"url\"]);",
									"        pm.expect(res[i][\"length\"]).to.equal(exp[i][\"length\"]);",
									"        pm.expect(res[i][\"name\"]).to.equal(exp[i][\"name\"]);",
									"        pm.expect(res[i][\"type\"]).to.equal(exp[i][\"type\"]);",
									"        pm.expect(res[i][\"at_sea\"]).to.equal(exp[i][\"at_sea\"]);",
									"    } ",
									"});"
								],
								"id": "795c0d73-a7ef-4b0e-994b-4adf37e210b6",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "400 - Too Little 2 - POST /boats/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 400 Created\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								],
								"id": "1c9f28ea-310f-4037-b513-869cde5268f5",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"good_name\", \"NameName\");",
									"pm.environment.set(\"good_length\", 10);",
									"pm.environment.set(\"good_type\", \"canoe\");",
									"",
									"pm.environment.set(\"false_at_sea\", false);",
									"pm.environment.set(\"true_at_sea\", true);"
								],
								"id": "a6cc4077-db51-4ef8-9e63-98de1a41f34c",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{good_name}}\",\n  \"length\": 17\n}"
						},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Verify /boats/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "463880e8-8e39-46ac-9f96-1e9e6385a48e",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches pre exactly\", function() {",
									"    res = pm.response.json();",
									"    console.log(res);",
									"    exp = JSON.parse(pm.environment.get(\"pre-BOATS\"));",
									"",
									"    // Compare Pre vs. Post",
									"    for (i = 0; i < res.length; i++ ) {",
									"        pm.expect(res[i][\"id\"]).to.equal(exp[i][\"id\"]);",
									"        pm.expect(res[i][\"url\"]).to.equal(exp[i][\"url\"]);",
									"        pm.expect(res[i][\"length\"]).to.equal(exp[i][\"length\"]);",
									"        pm.expect(res[i][\"name\"]).to.equal(exp[i][\"name\"]);",
									"        pm.expect(res[i][\"type\"]).to.equal(exp[i][\"type\"]);",
									"        pm.expect(res[i][\"at_sea\"]).to.equal(exp[i][\"at_sea\"]);",
									"    } ",
									"});"
								],
								"id": "795c0d73-a7ef-4b0e-994b-4adf37e210b6",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "400 - Too Little 3 - POST /boats/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 400 Created\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								],
								"id": "1c9f28ea-310f-4037-b513-869cde5268f5",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"good_name\", \"NameName\");",
									"pm.environment.set(\"good_length\", 10);",
									"pm.environment.set(\"good_type\", \"canoe\");",
									"",
									"pm.environment.set(\"false_at_sea\", false);",
									"pm.environment.set(\"true_at_sea\", true);"
								],
								"id": "a6cc4077-db51-4ef8-9e63-98de1a41f34c",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"{{good_type}}\",\n  \"length\": 17\n}"
						},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Verify /boats/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "463880e8-8e39-46ac-9f96-1e9e6385a48e",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches pre exactly\", function() {",
									"    res = pm.response.json();",
									"    console.log(res);",
									"    exp = JSON.parse(pm.environment.get(\"pre-BOATS\"));",
									"",
									"    // Compare Pre vs. Post",
									"    for (i = 0; i < res.length; i++ ) {",
									"        pm.expect(res[i][\"id\"]).to.equal(exp[i][\"id\"]);",
									"        pm.expect(res[i][\"url\"]).to.equal(exp[i][\"url\"]);",
									"        pm.expect(res[i][\"length\"]).to.equal(exp[i][\"length\"]);",
									"        pm.expect(res[i][\"name\"]).to.equal(exp[i][\"name\"]);",
									"        pm.expect(res[i][\"type\"]).to.equal(exp[i][\"type\"]);",
									"        pm.expect(res[i][\"at_sea\"]).to.equal(exp[i][\"at_sea\"]);",
									"    } ",
									"});"
								],
								"id": "795c0d73-a7ef-4b0e-994b-4adf37e210b6",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "400 - Too Little - POST /slips/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 400 Created\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								],
								"id": "6f8a8115-680c-4e20-add3-0bf25d5bb1f4",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"good_number\", 17);",
									"pm.environment.set(\"null_boat\", \"null\");",
									"pm.environment.set(\"null_boat_url\", \"null\");",
									"pm.environment.set(\"null_arrival_date\", \"null\");",
									"pm.environment.set(\"empty_departure_history\", JSON.stringify([]));"
								],
								"id": "1fcf985e-72fd-41aa-bbfb-244e6a131c84",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{domain}}/slips/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Verify /slips/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "463880e8-8e39-46ac-9f96-1e9e6385a48e",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches pre exactly\", function() {",
									"    res = pm.response.json();",
									"    // console.log(res);",
									"    exp = JSON.parse(pm.environment.get(\"pre-SLIPS\"));",
									"",
									"    // Compare Pre vs. Post",
									"    for (i = 0; i < res.length; i++ ) {",
									"        pm.expect(res[i][\"id\"]).to.equal(exp[i][\"id\"]);",
									"        pm.expect(res[i][\"url\"]).to.equal(exp[i][\"url\"]);",
									"        pm.expect(res[i][\"number\"]).to.equal(exp[i][\"number\"]);",
									"        pm.expect(res[i][\"current_boat\"]).to.equal(exp[i][\"current_boat\"]);",
									"        pm.expect(res[i][\"current_boat_url\"]).to.equal(exp[i][\"current_boat_url\"]);",
									"        ",
									"        // Departure History matches",
									"        exp_departure_history = exp[i][\"departure_history\"]",
									"        console.log(typeof(exp_departure_history));",
									"        actual_departure_history = res[i][\"departure_history\"]",
									"        ",
									"        // if (typeof exp_departure_history == \"string\") {",
									"        //     exp_departure_history = JSON.parse(exp_departure_history)",
									"        // }",
									"        // if (typeof actual_departure_history == \"string\") {",
									"        //     actual_departure_history = JSON.parse(actual_departure_history)",
									"        // }",
									"    ",
									"    ",
									"        // for ( i = 0; i < actual_departure_history.length; i++ ) {",
									"        //     pm.expect(actual_departure_history[i][\"departed_boat\"]).to.equal(exp_departure_history[i][\"departed_boat\"]);",
									"        //     pm.expect(actual_departure_history[i][\"departure_date\"]).to.equal(exp_departure_history[i][\"departure_date\"]);",
									"        // }",
									"    } ",
									"});"
								],
								"id": "d09f5123-a2c5-44d0-9629-56e96e00b753",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								""
							]
						},
						"description": ""
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"id": "747a6efb-c69a-4140-b2d7-79c5fca50370",
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"id": "0157a895-3af4-454b-9061-690ed6d2f8df",
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Read 1 Rejections",
			"description": "",
			"item": [
				{
					"name": "/slips/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var domain = pm.environment.get(\"domain\");",
									"var preBOATS = pm.environment.get(\"pre-BOATS\");",
									"",
									"postman.clearEnvironmentVariables();",
									"if (typeof domain == 'undefined') {",
									"    pm.environment.set(\"domain\", \"http://localhost:8080\");",
									"}",
									"else {",
									"    pm.environment.set(\"domain\", domain);",
									"}",
									"",
									"pm.environment.set(\"pre-BOATS\", preBOATS);",
									"",
									"pm.environment.set(\"number\", 17);"
								],
								"id": "fae3ccb6-b30a-4bf5-91f6-f3512c038ea0",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"    ",
									"    // Save Slips Response",
									"    res = pm.response.json();",
									"    pm.environment.set(\"pre-SLIPS\", JSON.stringify(res))",
									"});",
									"",
									"",
									""
								],
								"id": "d522cbe3-6a21-45b7-81f6-53ad8f4bd992",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/boats/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var domain = pm.environment.get(\"domain\");",
									"",
									"if (typeof domain == 'undefined') {",
									"    pm.environment.set(\"domain\", \"http://localhost:8080\");",
									"}",
									"else {",
									"    pm.environment.set(\"domain\", domain);",
									"}",
									"",
									"",
									"// Set environmental variables.",
									"pm.environment.set(\"name\", \"Boat Name\");",
									"pm.environment.set(\"type\", \"Boat Type\");",
									"pm.environment.set(\"length\", \"10\");"
								],
								"id": "c09a6915-2033-44a7-8af6-2e53a08fb76b",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"    ",
									"    // Save Boats Response",
									"    res = pm.response.json();",
									"    pm.environment.set(\"pre-BOATS\", JSON.stringify(res))",
									"});",
									""
								],
								"id": "ad318861-9714-498f-bad6-449d3e6984e9",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "404 /boats/{{fake_id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								],
								"id": "2ead5c75-0c08-4699-a786-b7bcc3b5121f",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"fake_id\", \"asdf1234\");"
								],
								"id": "3b1ec3ca-5acf-46a6-9946-d18d8aabffb3",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/{{fake_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{fake_id}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Verify /boats/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "463880e8-8e39-46ac-9f96-1e9e6385a48e",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches pre exactly\", function() {",
									"    res = pm.response.json();",
									"    console.log(res);",
									"    exp = JSON.parse(pm.environment.get(\"pre-BOATS\"));",
									"",
									"    // Compare Pre vs. Post",
									"    for (i = 0; i < res.length; i++ ) {",
									"        pm.expect(res[i][\"id\"]).to.equal(exp[i][\"id\"]);",
									"        pm.expect(res[i][\"url\"]).to.equal(exp[i][\"url\"]);",
									"        pm.expect(res[i][\"length\"]).to.equal(exp[i][\"length\"]);",
									"        pm.expect(res[i][\"name\"]).to.equal(exp[i][\"name\"]);",
									"        pm.expect(res[i][\"type\"]).to.equal(exp[i][\"type\"]);",
									"        pm.expect(res[i][\"at_sea\"]).to.equal(exp[i][\"at_sea\"]);",
									"    } ",
									"});"
								],
								"id": "795c0d73-a7ef-4b0e-994b-4adf37e210b6",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "404 /slips/{{fake_id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								],
								"id": "2ead5c75-0c08-4699-a786-b7bcc3b5121f",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"fake_id\", \"asdf1234\");"
								],
								"id": "3b1ec3ca-5acf-46a6-9946-d18d8aabffb3",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/{{fake_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								"{{fake_id}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Verify /slips/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "463880e8-8e39-46ac-9f96-1e9e6385a48e",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches pre exactly\", function() {",
									"    res = pm.response.json();",
									"    // console.log(res);",
									"    exp = JSON.parse(pm.environment.get(\"pre-SLIPS\"));",
									"",
									"    // Compare Pre vs. Post",
									"    for (i = 0; i < res.length; i++ ) {",
									"        pm.expect(res[i][\"id\"]).to.equal(exp[i][\"id\"]);",
									"        pm.expect(res[i][\"url\"]).to.equal(exp[i][\"url\"]);",
									"        pm.expect(res[i][\"number\"]).to.equal(exp[i][\"number\"]);",
									"        pm.expect(res[i][\"current_boat\"]).to.equal(exp[i][\"current_boat\"]);",
									"        pm.expect(res[i][\"current_boat_url\"]).to.equal(exp[i][\"current_boat_url\"]);",
									"        ",
									"        // Departure History matches",
									"        exp_departure_history = exp[i][\"departure_history\"]",
									"        console.log(typeof(exp_departure_history));",
									"        actual_departure_history = res[i][\"departure_history\"]",
									"        ",
									"        // if (typeof exp_departure_history == \"string\") {",
									"        //     exp_departure_history = JSON.parse(exp_departure_history)",
									"        // }",
									"        // if (typeof actual_departure_history == \"string\") {",
									"        //     actual_departure_history = JSON.parse(actual_departure_history)",
									"        // }",
									"    ",
									"    ",
									"        // for ( i = 0; i < actual_departure_history.length; i++ ) {",
									"        //     pm.expect(actual_departure_history[i][\"departed_boat\"]).to.equal(exp_departure_history[i][\"departed_boat\"]);",
									"        //     pm.expect(actual_departure_history[i][\"departure_date\"]).to.equal(exp_departure_history[i][\"departure_date\"]);",
									"        // }",
									"    } ",
									"});"
								],
								"id": "d09f5123-a2c5-44d0-9629-56e96e00b753",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								""
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Rejections",
			"description": "",
			"item": [
				{
					"name": "/boats/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "82d89a86-8a7d-4283-92b2-032c1885e2f4",
								"type": "text/javascript",
								"exec": [
									"// var domain = pm.environment.get(\"domain\");",
									"",
									"// if (typeof domain == 'undefined') {",
									"//     pm.environment.set(\"domain\", \"http://localhost:8080\");",
									"// }",
									"// else {",
									"//     pm.environment.set(\"domain\", domain);",
									"// }",
									"",
									"",
									"// // Set environmental variables.",
									"// pm.environment.set(\"name\", \"Boat Name\");",
									"// pm.environment.set(\"type\", \"Boat Type\");",
									"// pm.environment.set(\"length\", \"10\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eb28e4a9-a3c9-453c-a16a-d3ae2b41feae",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"    ",
									"    // Save Boats Response",
									"    res = pm.response.json();",
									"    pm.environment.set(\"pre-BOATS2\", JSON.stringify(res))",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/slips/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cffabb52-71dd-423f-b413-10e9b449e65a",
								"type": "text/javascript",
								"exec": [
									"// var domain = pm.environment.get(\"domain\");",
									"// var preBOATS = pm.environment.get(\"pre-BOATS\");",
									"",
									"// postman.clearEnvironmentVariables();",
									"// if (typeof domain == 'undefined') {",
									"//     pm.environment.set(\"domain\", \"http://localhost:8080\");",
									"// }",
									"// else {",
									"//     pm.environment.set(\"domain\", domain);",
									"// }",
									"",
									"// pm.environment.set(\"pre-BOATS\", preBOATS);",
									"",
									"// pm.environment.set(\"number\", 17);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e061ea4e-fd9d-4a55-91ff-8318edcebc01",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"    ",
									"    // Save Slips Response",
									"    res = pm.response.json();",
									"    pm.environment.set(\"pre-SLIPS2\", JSON.stringify(res))",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "404 /boats/{fake_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								],
								"id": "0483af1e-4b7b-4179-92fe-4413752acddb",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "fcc266d0-f6dc-447c-97e0-cbf57aa62ff0",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"New name\",\n  \"type\": \"canoe\",\n  \"length\": 15\n}"
						},
						"url": {
							"raw": "{{domain}}/boats/{{fake_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{fake_id}}"
							]
						},
						"description": "Edit boat"
					},
					"response": []
				},
				{
					"name": "404 /slips/{fake_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								],
								"id": "a38aa728-79ea-42df-8de5-31d0f7e5027f",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "046e8e06-8c44-4f5a-954a-2a766b1193ef",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"number\": {{number}}\n}"
						},
						"url": {
							"raw": "{{domain}}/slips/{{fake_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								"{{fake_id}}"
							]
						},
						"description": "pm.environment.set(\"good_number\", 17);\npm.environment.set(\"null_boat\", \"null\");\npm.environment.set(\"null_boat_url\", \"null\");\npm.environment.set(\"null_arrival_date\", \"null\");\npm.environment.set(\"empty_departure_history\", JSON.stringify([]));"
					},
					"response": []
				},
				{
					"name": "Verify /boats/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "463880e8-8e39-46ac-9f96-1e9e6385a48e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7b5ae158-65d2-4fcd-a250-063e9465eaa9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches pre exactly\", function() {",
									"    res = pm.response.json();",
									"    console.log(res);",
									"    exp = JSON.parse(pm.environment.get(\"pre-BOATS2\"));",
									"",
									"    // Compare Pre vs. Post",
									"    for (i = 0; i < res.length; i++ ) {",
									"        pm.expect(res[i][\"id\"]).to.equal(exp[i][\"id\"]);",
									"        pm.expect(res[i][\"url\"]).to.equal(exp[i][\"url\"]);",
									"        pm.expect(res[i][\"length\"]).to.equal(exp[i][\"length\"]);",
									"        pm.expect(res[i][\"name\"]).to.equal(exp[i][\"name\"]);",
									"        pm.expect(res[i][\"type\"]).to.equal(exp[i][\"type\"]);",
									"        pm.expect(res[i][\"at_sea\"]).to.equal(exp[i][\"at_sea\"]);",
									"    } ",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Verify /slips/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "463880e8-8e39-46ac-9f96-1e9e6385a48e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bb000eb-3c78-443e-841b-0599fa2dfd68",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches pre exactly\", function() {",
									"    res = pm.response.json();",
									"    // console.log(res);",
									"    exp = JSON.parse(pm.environment.get(\"pre-SLIPS2\"));",
									"",
									"    // Compare Pre vs. Post",
									"    for (i = 0; i < res.length; i++ ) {",
									"        pm.expect(res[i][\"id\"]).to.equal(exp[i][\"id\"]);",
									"        pm.expect(res[i][\"url\"]).to.equal(exp[i][\"url\"]);",
									"        pm.expect(res[i][\"number\"]).to.equal(exp[i][\"number\"]);",
									"        pm.expect(res[i][\"current_boat\"]).to.equal(exp[i][\"current_boat\"]);",
									"        pm.expect(res[i][\"current_boat_url\"]).to.equal(exp[i][\"current_boat_url\"]);",
									"        ",
									"        // Departure History matches",
									"        exp_departure_history = exp[i][\"departure_history\"]",
									"        console.log(typeof(exp_departure_history));",
									"        actual_departure_history = res[i][\"departure_history\"]",
									"    } ",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /boats/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches request\", function () {",
									"    exp_name = pm.environment.get(\"name\");",
									"    exp_type = pm.environment.get(\"type\");",
									"    exp_length = pm.environment.get(\"length\");",
									"    exp_at_sea = true;",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['name']).to.equal(exp_name);",
									"    pm.expect(res['type']).to.equal(exp_type);",
									"    pm.expect(res['length'].toString()).to.equal(exp_length);",
									"    pm.expect(res['at_sea']).to.equal(exp_at_sea);",
									"    ",
									"    // Save URL and ID",
									"    pm.environment.set(\"boat_url\", res['url']);",
									"    pm.environment.set(\"boat_id\", res['id']);",
									"    ",
									"    // Save response as string",
									"    res_string = JSON.stringify(res);",
									"    pm.environment.set(\"preBoat\", res_string);",
									"    ",
									"});",
									"",
									""
								],
								"id": "3596d6fa-51a9-4032-8ce0-236a47d20c13",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "046e8e06-8c44-4f5a-954a-2a766b1193ef",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{name}}\",\n  \"type\": \"{{type}}\",\n  \"length\": {{length}}\n}"
						},
						"url": {
							"raw": "{{domain}}/boats",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /slips/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches request\", function () {",
									"    exp_number = pm.environment.get(\"number\");",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['number'].toString()).to.equal(exp_number);",
									"    ",
									"    // Save URL and ID",
									"    pm.environment.set(\"slip_url\", res['url']);",
									"    pm.environment.set(\"slip_id\", res['id']);",
									"    ",
									"    // Save response as string",
									"    res_string = JSON.stringify(res);",
									"    pm.environment.set(\"preSlip\", res_string);",
									"    ",
									"});",
									"",
									""
								],
								"id": "2ed495d2-1183-4cd6-ba18-55c3c56c184b",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "046e8e06-8c44-4f5a-954a-2a766b1193ef",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"number\": {{number}}\n}"
						},
						"url": {
							"raw": "{{domain}}/slips",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/slips/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// var domain = pm.environment.get(\"domain\");",
									"// var preBOATS = pm.environment.get(\"pre-BOATS\");",
									"",
									"// postman.clearEnvironmentVariables();",
									"// if (typeof domain == 'undefined') {",
									"//     pm.environment.set(\"domain\", \"http://localhost:8080\");",
									"// }",
									"// else {",
									"//     pm.environment.set(\"domain\", domain);",
									"// }",
									"",
									"// pm.environment.set(\"pre-BOATS\", preBOATS);",
									"",
									"// pm.environment.set(\"number\", 17);"
								],
								"id": "cffabb52-71dd-423f-b413-10e9b449e65a",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"    ",
									"    // Save Slips Response",
									"    res = pm.response.json();",
									"    pm.environment.set(\"pre-SLIPS2\", JSON.stringify(res))",
									"});",
									"",
									"",
									""
								],
								"id": "e061ea4e-fd9d-4a55-91ff-8318edcebc01",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/boats/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// var domain = pm.environment.get(\"domain\");",
									"",
									"// if (typeof domain == 'undefined') {",
									"//     pm.environment.set(\"domain\", \"http://localhost:8080\");",
									"// }",
									"// else {",
									"//     pm.environment.set(\"domain\", domain);",
									"// }",
									"",
									"",
									"// // Set environmental variables.",
									"// pm.environment.set(\"name\", \"Boat Name\");",
									"// pm.environment.set(\"type\", \"Boat Type\");",
									"// pm.environment.set(\"length\", \"10\");"
								],
								"id": "82d89a86-8a7d-4283-92b2-032c1885e2f4",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"    ",
									"    // Save Boats Response",
									"    res = pm.response.json();",
									"    pm.environment.set(\"pre-BOATS2\", JSON.stringify(res))",
									"});",
									""
								],
								"id": "eb28e4a9-a3c9-453c-a16a-d3ae2b41feae",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "400 EXTRA INFO  /boats/{boat_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f1c6145-8a4f-4c93-b0c9-403aa9247391",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fcc266d0-f6dc-447c-97e0-cbf57aa62ff0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"NEW {{name}}\",\n  \"type\": \"NEW {{type}}\",\n  \"length\": 100,\n  \"extra\": \"nonsense\"\n}"
						},
						"url": {
							"raw": "{{domain}}/boats/{{boat_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{boat_id}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "400 EXTRA INFO  /slips/{slip_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bbcfd953-6997-4041-90f2-e526e26f1807",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fcc266d0-f6dc-447c-97e0-cbf57aa62ff0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"number\": \"NEW {{number}}\",\n  \"extra\": \"nonsense\"\n}"
						},
						"url": {
							"raw": "{{domain}}/slips/{{slip_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								"{{slip_id}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "400 - Invalid Data - PATCH /boats/{{boat_id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0381a9c2-440d-4c82-b66e-2295417fca02",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8ae48a59-9f7f-4722-85a5-b0c8728aaacc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"NEW {{name}}\",\n  \"type\": \"NEW {{type}}\",\n  \"length\": \"seventeen\"\n}"
						},
						"url": {
							"raw": "{{domain}}/boats/{{boat_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{boat_id}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "400 - Invalid Data - PATCH /slips/{{slip_id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "362ca52d-8f7b-4eb6-87d2-afd5a8cd734f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7140272-f895-4c46-b508-9aa99480134e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"number\": \"non-sense\"\n}"
						},
						"url": {
							"raw": "{{domain}}/slips/{{slip_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								"{{slip_id}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Verify /boats/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "463880e8-8e39-46ac-9f96-1e9e6385a48e",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches pre exactly\", function() {",
									"    res = pm.response.json();",
									"    console.log(res);",
									"    exp = JSON.parse(pm.environment.get(\"pre-BOATS2\"));",
									"",
									"    // Compare Pre vs. Post",
									"    for (i = 0; i < res.length; i++ ) {",
									"        pm.expect(res[i][\"id\"]).to.equal(exp[i][\"id\"]);",
									"        pm.expect(res[i][\"url\"]).to.equal(exp[i][\"url\"]);",
									"        pm.expect(res[i][\"length\"]).to.equal(exp[i][\"length\"]);",
									"        pm.expect(res[i][\"name\"]).to.equal(exp[i][\"name\"]);",
									"        pm.expect(res[i][\"type\"]).to.equal(exp[i][\"type\"]);",
									"        pm.expect(res[i][\"at_sea\"]).to.equal(exp[i][\"at_sea\"]);",
									"    } ",
									"});"
								],
								"id": "7b5ae158-65d2-4fcd-a250-063e9465eaa9",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Verify /slips/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "463880e8-8e39-46ac-9f96-1e9e6385a48e",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches pre exactly\", function() {",
									"    res = pm.response.json();",
									"    // console.log(res);",
									"    exp = JSON.parse(pm.environment.get(\"pre-SLIPS2\"));",
									"",
									"    // Compare Pre vs. Post",
									"    for (i = 0; i < res.length; i++ ) {",
									"        pm.expect(res[i][\"id\"]).to.equal(exp[i][\"id\"]);",
									"        pm.expect(res[i][\"url\"]).to.equal(exp[i][\"url\"]);",
									"        pm.expect(res[i][\"number\"]).to.equal(exp[i][\"number\"]);",
									"        pm.expect(res[i][\"current_boat\"]).to.equal(exp[i][\"current_boat\"]);",
									"        pm.expect(res[i][\"current_boat_url\"]).to.equal(exp[i][\"current_boat_url\"]);",
									"        ",
									"        // Departure History matches",
									"        exp_departure_history = exp[i][\"departure_history\"]",
									"        console.log(typeof(exp_departure_history));",
									"        actual_departure_history = res[i][\"departure_history\"]",
									"        ",
									"        // if (typeof exp_departure_history == \"string\") {",
									"        //     exp_departure_history = JSON.parse(exp_departure_history)",
									"        // }",
									"        // if (typeof actual_departure_history == \"string\") {",
									"        //     actual_departure_history = JSON.parse(actual_departure_history)",
									"        // }",
									"    ",
									"    ",
									"        // for ( i = 0; i < actual_departure_history.length; i++ ) {",
									"        //     pm.expect(actual_departure_history[i][\"departed_boat\"]).to.equal(exp_departure_history[i][\"departed_boat\"]);",
									"        //     pm.expect(actual_departure_history[i][\"departure_date\"]).to.equal(exp_departure_history[i][\"departure_date\"]);",
									"        // }",
									"    } ",
									"});"
								],
								"id": "53151dae-db0e-4151-9ccc-d326f91f94b7",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								""
							]
						},
						"description": ""
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set environmental variables.",
							"// PRE-VALUES",
							"pm.environment.set(\"name\", \"Boat Name\");",
							"pm.environment.set(\"type\", \"Boat Type\");",
							"pm.environment.set(\"length\", \"10\");",
							"",
							"pm.environment.set(\"number\", \"17\");",
							"",
							"pm.environment.set(\"fake_id\", \"asdf1234\");",
							"",
							"pm.environment.set(\"false_at_sea\", false);",
							"pm.environment.set(\"true_at_sea\", true);"
						],
						"id": "954eb6ac-c95b-455d-8559-f424c6fcd264",
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"id": "9a9c873e-75fb-494b-bdc0-9fa9febdef97",
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Docking Rejections",
			"description": "",
			"item": [
				{
					"name": "POST /boats/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches request\", function () {",
									"    exp_name = pm.environment.get(\"name\");",
									"    exp_type = pm.environment.get(\"type\");",
									"    exp_length = pm.environment.get(\"length\");",
									"    exp_at_sea = true;",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['name']).to.equal(exp_name);",
									"    pm.expect(res['type']).to.equal(exp_type);",
									"    pm.expect(res['length'].toString()).to.equal(exp_length);",
									"    pm.expect(res['at_sea']).to.equal(exp_at_sea);",
									"    ",
									"    // Save URL and ID",
									"    pm.environment.set(\"boat_url\", res['url']);",
									"    pm.environment.set(\"boat_id\", res['id']);",
									"    ",
									"    // Save response as string",
									"    res_string = JSON.stringify(res);",
									"    pm.environment.set(\"preBoat\", res_string);",
									"    ",
									"});",
									"",
									""
								],
								"id": "3596d6fa-51a9-4032-8ce0-236a47d20c13",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "046e8e06-8c44-4f5a-954a-2a766b1193ef",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{name}}\",\n  \"type\": \"{{type}}\",\n  \"length\": {{length}}\n}"
						},
						"url": {
							"raw": "{{domain}}/boats",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /slips/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches request\", function () {",
									"    exp_number = pm.environment.get(\"number\");",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['number'].toString()).to.equal(exp_number);",
									"    ",
									"    // Save URL and ID",
									"    pm.environment.set(\"slip_url\", res['url']);",
									"    pm.environment.set(\"slip_id\", res['id']);",
									"    ",
									"    // Save response as string",
									"    res_string = JSON.stringify(res);",
									"    pm.environment.set(\"preSlip\", res_string);",
									"    ",
									"});",
									"",
									""
								],
								"id": "2ed495d2-1183-4cd6-ba18-55c3c56c184b",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "046e8e06-8c44-4f5a-954a-2a766b1193ef",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"number\": {{number}}\n}"
						},
						"url": {
							"raw": "{{domain}}/slips",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/slips/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e9556aaf-dffb-4be0-8d20-cffd9aa02460",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bddb08bd-733c-4610-9c1d-c5101b9ae443",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"    ",
									"    // Save Slips Response",
									"    res = pm.response.json();",
									"    pm.environment.set(\"pre-SLIPS3\", JSON.stringify(res))",
									"    console.log(\"Docking Slips: \" + res);",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "/boats/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "11c0c97b-1f2a-4990-b5ab-708dae4a0ce6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0ff1345a-2e88-42b1-b04f-a8892296646e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"    ",
									"    // Save Boats Response",
									"    res = pm.response.json();",
									"    pm.environment.set(\"pre-BOATS3\", JSON.stringify(res))",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "404 /boats/{{fake_id}}/slips/{{slip_id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								],
								"id": "0483af1e-4b7b-4179-92fe-4413752acddb",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "fcc266d0-f6dc-447c-97e0-cbf57aa62ff0",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"arrival_date\": \"{{arrival_date}}\"\n}"
						},
						"url": {
							"raw": "{{domain}}/boats/{{fake_id}}/slips/{{slip_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{fake_id}}",
								"slips",
								"{{slip_id}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "404 /boats/{{boat_id}}/slips/{{fake_id}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								],
								"id": "0483af1e-4b7b-4179-92fe-4413752acddb",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "fcc266d0-f6dc-447c-97e0-cbf57aa62ff0",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"arrival_date\": \"{{arrival_date}}\"\n}"
						},
						"url": {
							"raw": "{{domain}}/boats/{{slip_id}}/slips/{{fake_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{slip_id}}",
								"slips",
								"{{fake_id}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Verify /boats/ 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "463880e8-8e39-46ac-9f96-1e9e6385a48e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e8a9683c-2c8d-4cce-be0b-4b55701f92de",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches pre exactly\", function() {",
									"    res = pm.response.json();",
									"    console.log(res);",
									"    exp = JSON.parse(pm.environment.get(\"pre-BOATS3\"));",
									"",
									"    // Compare Pre vs. Post",
									"    for (i = 0; i < res.length; i++ ) {",
									"        pm.expect(res[i][\"id\"]).to.equal(exp[i][\"id\"]);",
									"        pm.expect(res[i][\"url\"]).to.equal(exp[i][\"url\"]);",
									"        pm.expect(res[i][\"length\"].toString()).to.equal(exp[i][\"length\"].toString());",
									"        pm.expect(res[i][\"name\"]).to.equal(exp[i][\"name\"]);",
									"        pm.expect(res[i][\"type\"]).to.equal(exp[i][\"type\"]);",
									"        pm.expect(res[i][\"at_sea\"]).to.equal(exp[i][\"at_sea\"]);",
									"    } ",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Verify /slips/ 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "463880e8-8e39-46ac-9f96-1e9e6385a48e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "50e73eb3-45b8-4c33-a6c6-2207ca723b38",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches pre exactly\", function() {",
									"    res = pm.response.json();",
									"    // console.log(res);",
									"    exp = JSON.parse(pm.environment.get(\"pre-SLIPS3\"));",
									"    console.log(\"RES: \" + res);",
									"    console.log(\"RES: \" + JSON.stringify(res));",
									"    console.log(\"EXP: \" + JSON.stringify(exp));",
									"    // pm.expect(res.length).to.equal(exp.length);",
									"    ",
									"    // Compare Pre vs. Post",
									"    for (i = 0; i < res.length; i++ ) {",
									"        if (exp[i] === null) {",
									"            console.log(\"Slip result too long\")",
									"            console.log(\"RES: \" + res);",
									"            console.log(\"EXP: \" + exp);",
									"            return",
									"        }",
									"        pm.expect(res[i][\"id\"]).to.equal(exp[i][\"id\"]);",
									"        pm.expect(res[i][\"url\"]).to.equal(exp[i][\"url\"]);",
									"        pm.expect(res[i][\"number\"]).to.equal(exp[i][\"number\"]);",
									"        pm.expect(res[i][\"current_boat\"]).to.equal(exp[i][\"current_boat\"]);",
									"        pm.expect(res[i][\"current_boat_url\"]).to.equal(exp[i][\"current_boat_url\"]);",
									"        ",
									"        // // Departure History matches",
									"        // exp_departure_history = exp[i][\"departure_history\"]",
									"        // console.log(typeof(exp_departure_history));",
									"        // actual_departure_history = res[i][\"departure_history\"]",
									"        ",
									"    } ",
									"});",
									"",
									"",
									"pm.test(\"response matches pre history\", function() {",
									"    res = pm.response.json();",
									"    exp = JSON.parse(pm.environment.get(\"pre-SLIPS3\"));",
									"    console.log(\"RES: \" + res);",
									"    console.log(\"RES: \" + JSON.stringify(res));",
									"    console.log(\"EXP: \" + JSON.stringify(exp));",
									"    ",
									"    // Compare Pre vs. Post",
									"    for (i = 0; i < res.length; i++ ) {",
									"        if (exp[i] === null) {",
									"            console.log(\"Slip result too long\")",
									"            console.log(\"RES: \" + res);",
									"            console.log(\"EXP: \" + exp);",
									"            return",
									"        }",
									"",
									"        // Departure History matches",
									"        exp_departure_history = exp[i][\"departure_history\"]",
									"        console.log(typeof(exp_departure_history));",
									"        actual_departure_history = res[i][\"departure_history\"]",
									"        ",
									"    } ",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "400 EXTRA DATA -  /boats/{boat_id}/slips/{slip_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								],
								"id": "b089181d-68e8-48f9-9670-4960a8b661a4",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "fcc266d0-f6dc-447c-97e0-cbf57aa62ff0",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"arrival_date\": \"{{arrival_date}}\",\n\t\"extra\": \"nonsense\"\n}"
						},
						"url": {
							"raw": "{{domain}}/boats/{{boat_id}}/slips/{{slip_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{boat_id}}",
								"slips",
								"{{slip_id}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "400 NO DATA -  /boats/{boat_id}/slips/{slip_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								],
								"id": "b089181d-68e8-48f9-9670-4960a8b661a4",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "fcc266d0-f6dc-447c-97e0-cbf57aa62ff0",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{domain}}/boats/{{boat_id}}/slips/{{slip_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{boat_id}}",
								"slips",
								"{{slip_id}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Verify /boats/ 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "463880e8-8e39-46ac-9f96-1e9e6385a48e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "674f88c3-5a0c-4a4d-acce-755bfeb6e12e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches pre exactly\", function() {",
									"    res = pm.response.json();",
									"    console.log(res);",
									"    exp = JSON.parse(pm.environment.get(\"pre-BOATS3\"));",
									"",
									"    // Compare Pre vs. Post",
									"    for (i = 0; i < res.length; i++ ) {",
									"        pm.expect(res[i][\"id\"]).to.equal(exp[i][\"id\"]);",
									"        pm.expect(res[i][\"url\"]).to.equal(exp[i][\"url\"]);",
									"        pm.expect(res[i][\"length\"]).to.equal(exp[i][\"length\"]);",
									"        pm.expect(res[i][\"name\"]).to.equal(exp[i][\"name\"]);",
									"        pm.expect(res[i][\"type\"]).to.equal(exp[i][\"type\"]);",
									"        pm.expect(res[i][\"at_sea\"]).to.equal(exp[i][\"at_sea\"]);",
									"    } ",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Verify /slips/ 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "463880e8-8e39-46ac-9f96-1e9e6385a48e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1252833b-961d-4094-b14f-c8d5b6c35ab5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches pre exactly\", function() {",
									"    res = pm.response.json();",
									"    // console.log(res);",
									"    exp = JSON.parse(pm.environment.get(\"pre-SLIPS3\"));",
									"",
									"    // Compare Pre vs. Post",
									"    for (i = 0; i < res.length; i++ ) {",
									"        pm.expect(res[i][\"id\"]).to.equal(exp[i][\"id\"]);",
									"        pm.expect(res[i][\"url\"]).to.equal(exp[i][\"url\"]);",
									"        pm.expect(res[i][\"number\"]).to.equal(exp[i][\"number\"]);",
									"        pm.expect(res[i][\"current_boat\"]).to.equal(exp[i][\"current_boat\"]);",
									"        pm.expect(res[i][\"current_boat_url\"]).to.equal(exp[i][\"current_boat_url\"]);",
									"        ",
									"        // Departure History matches",
									"        exp_departure_history = exp[i][\"departure_history\"]",
									"        console.log(typeof(exp_departure_history));",
									"        actual_departure_history = res[i][\"departure_history\"]",
									"        ",
									"        // if (typeof exp_departure_history == \"string\") {",
									"        //     exp_departure_history = JSON.parse(exp_departure_history)",
									"        // }",
									"        // if (typeof actual_departure_history == \"string\") {",
									"        //     actual_departure_history = JSON.parse(actual_departure_history)",
									"        // }",
									"    ",
									"    ",
									"        // for ( i = 0; i < actual_departure_history.length; i++ ) {",
									"        //     pm.expect(actual_departure_history[i][\"departed_boat\"]).to.equal(exp_departure_history[i][\"departed_boat\"]);",
									"        //     pm.expect(actual_departure_history[i][\"departure_date\"]).to.equal(exp_departure_history[i][\"departure_date\"]);",
									"        // }",
									"    } ",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "400 INVALID INFO 1 -  /boats/{boat_id}/slips/{slip_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								],
								"id": "b089181d-68e8-48f9-9670-4960a8b661a4",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "fcc266d0-f6dc-447c-97e0-cbf57aa62ff0",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"arrival_date\": \"{{invalid_date1}}\"\n}"
						},
						"url": {
							"raw": "{{domain}}/boats/{{boat_id}}/slips/{{slip_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{boat_id}}",
								"slips",
								"{{slip_id}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "400 INVALID INFO 2 -  /boats/{boat_id}/slips/{slip_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								],
								"id": "b089181d-68e8-48f9-9670-4960a8b661a4",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "fcc266d0-f6dc-447c-97e0-cbf57aa62ff0",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"arrival_date\": \"{{invalid_date1}}\"\n}"
						},
						"url": {
							"raw": "{{domain}}/boats/{{boat_id}}/slips/{{slip_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{boat_id}}",
								"slips",
								"{{slip_id}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "400 INVALID INFO 3 -  /boats/{boat_id}/slips/{slip_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response has error\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.have.jsonBody('error');",
									"});",
									""
								],
								"id": "b089181d-68e8-48f9-9670-4960a8b661a4",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "fcc266d0-f6dc-447c-97e0-cbf57aa62ff0",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"arrival_date\": \"{{invalid_date3}}\"\n}"
						},
						"url": {
							"raw": "{{domain}}/boats/{{boat_id}}/slips/{{slip_id}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								"{{boat_id}}",
								"slips",
								"{{slip_id}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Verify /boats/ 3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "463880e8-8e39-46ac-9f96-1e9e6385a48e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b1dcf73a-93e0-464d-9dc1-00d7feb91250",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches pre exactly\", function() {",
									"    res = pm.response.json();",
									"    console.log(res);",
									"    exp = JSON.parse(pm.environment.get(\"pre-BOATS3\"));",
									"",
									"    // Compare Pre vs. Post",
									"    for (i = 0; i < res.length; i++ ) {",
									"        pm.expect(res[i][\"id\"]).to.equal(exp[i][\"id\"]);",
									"        pm.expect(res[i][\"url\"]).to.equal(exp[i][\"url\"]);",
									"        pm.expect(res[i][\"length\"]).to.equal(exp[i][\"length\"]);",
									"        pm.expect(res[i][\"name\"]).to.equal(exp[i][\"name\"]);",
									"        pm.expect(res[i][\"type\"]).to.equal(exp[i][\"type\"]);",
									"        pm.expect(res[i][\"at_sea\"]).to.equal(exp[i][\"at_sea\"]);",
									"    } ",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/boats/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Verify /slips/ 3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "463880e8-8e39-46ac-9f96-1e9e6385a48e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cba04786-51f8-4622-b31e-b79afaec7748",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches pre exactly\", function() {",
									"    res = pm.response.json();",
									"    // console.log(res);",
									"    exp = JSON.parse(pm.environment.get(\"pre-SLIPS3\"));",
									"",
									"    // Compare Pre vs. Post",
									"    for (i = 0; i < res.length; i++ ) {",
									"        pm.expect(res[i][\"id\"]).to.equal(exp[i][\"id\"]);",
									"        pm.expect(res[i][\"url\"]).to.equal(exp[i][\"url\"]);",
									"        pm.expect(res[i][\"number\"]).to.equal(exp[i][\"number\"]);",
									"        pm.expect(res[i][\"current_boat\"]).to.equal(exp[i][\"current_boat\"]);",
									"        pm.expect(res[i][\"current_boat_url\"]).to.equal(exp[i][\"current_boat_url\"]);",
									"        ",
									"        // Departure History matches",
									"        exp_departure_history = exp[i][\"departure_history\"]",
									"        console.log(typeof(exp_departure_history));",
									"        actual_departure_history = res[i][\"departure_history\"]",
									"        ",
									"        // if (typeof exp_departure_history == \"string\") {",
									"        //     exp_departure_history = JSON.parse(exp_departure_history)",
									"        // }",
									"        // if (typeof actual_departure_history == \"string\") {",
									"        //     actual_departure_history = JSON.parse(actual_departure_history)",
									"        // }",
									"    ",
									"    ",
									"        // for ( i = 0; i < actual_departure_history.length; i++ ) {",
									"        //     pm.expect(actual_departure_history[i][\"departed_boat\"]).to.equal(exp_departure_history[i][\"departed_boat\"]);",
									"        //     pm.expect(actual_departure_history[i][\"departure_date\"]).to.equal(exp_departure_history[i][\"departure_date\"]);",
									"        // }",
									"    } ",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{domain}}/slips/",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips",
								""
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /slips/ #2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f4d6a40-3304-44cc-a643-071f07725baf",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches request\", function () {",
									"    exp_number = pm.environment.get(\"number2\");",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['number'].toString()).to.equal(exp_number);",
									"    ",
									"    // Save URL and ID",
									"    pm.environment.set(\"slip_url2\", res['url']);",
									"    pm.environment.set(\"slip_id2\", res['id']);",
									"    ",
									"    // Save response as string",
									"    res_string = JSON.stringify(res);",
									"    pm.environment.set(\"preSlip2\", res_string);",
									"    ",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "046e8e06-8c44-4f5a-954a-2a766b1193ef",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"number\": {{number2}}\n}"
						},
						"url": {
							"raw": "{{domain}}/slips",
							"host": [
								"{{domain}}"
							],
							"path": [
								"slips"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /boats/ #2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78c0e802-86f3-4a86-9ce2-7b95bee5163d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"response is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response has body\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.jsonBody('');",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response matches request\", function () {",
									"    exp_name = pm.environment.get(\"name2\");",
									"    exp_type = pm.environment.get(\"type2\");",
									"    exp_length = pm.environment.get(\"length2\");",
									"    exp_at_sea = true;",
									"    ",
									"    res = pm.response.json();",
									"    pm.expect(res['name']).to.equal(exp_name);",
									"    pm.expect(res['type']).to.equal(exp_type);",
									"    pm.expect(res['length'].toString()).to.equal(exp_length);",
									"    pm.expect(res['at_sea']).to.equal(exp_at_sea);",
									"    ",
									"    // Save URL and ID",
									"    pm.environment.set(\"boat_url2\", res['url']);",
									"    pm.environment.set(\"boat_id2\", res['id']);",
									"    ",
									"    // Save response as string",
									"    res_string = JSON.stringify(res);",
									"    pm.environment.set(\"preBoat2\", res_string);",
									"    ",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "046e8e06-8c44-4f5a-954a-2a766b1193ef",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{name2}}\",\n  \"type\": \"{{type2}}\",\n  \"length\": {{length2}}\n}"
						},
						"url": {
							"raw": "{{domain}}/boats",
							"host": [
								"{{domain}}"
							],
							"path": [
								"boats"
							]
						},
						"description": ""
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set environmental variables.",
							"// PRE-VALUES",
							"pm.environment.set(\"name\", \"Boat Name 1\");",
							"pm.environment.set(\"type\", \"Boat Type 1\");",
							"pm.environment.set(\"length\", \"10\");",
							"",
							"pm.environment.set(\"name2\", \"Boat Name 2\");",
							"pm.environment.set(\"type2\", \"Boat Type 2\");",
							"pm.environment.set(\"length2\", \"10\");",
							"",
							"",
							"",
							"pm.environment.set(\"number\", \"17\");",
							"pm.environment.set(\"number2\", \"5\");",
							"",
							"pm.environment.set(\"fake_id\", \"asdf1234\");",
							"",
							"pm.environment.set(\"false_at_sea\", false);",
							"pm.environment.set(\"true_at_sea\", true);",
							"",
							"",
							"pm.environment.set(\"arrival_date\", \"01/02/1999\");",
							"pm.environment.set(\"invalid_date1\", \"01/40/1999\");",
							"pm.environment.set(\"invalid_date2\", \"01-12-1999\");",
							"pm.environment.set(\"invalid_date3\", \"2017/01/23\");"
						],
						"id": "954eb6ac-c95b-455d-8559-f424c6fcd264",
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"id": "9a9c873e-75fb-494b-bdc0-9fa9febdef97",
						"type": "text/javascript"
					}
				}
			]
		}
	]
}